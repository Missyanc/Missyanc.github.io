<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>言小姐</title>
  
  <subtitle>--by yanc</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://missyanc.github.io/"/>
  <updated>2018-09-24T05:48:25.915Z</updated>
  <id>https://missyanc.github.io/</id>
  
  <author>
    <name>Missyanc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>48.Rotate Image</title>
    <link href="https://missyanc.github.io/2018/09/24/Image/"/>
    <id>https://missyanc.github.io/2018/09/24/Image/</id>
    <published>2018-09-24T05:41:54.000Z</published>
    <updated>2018-09-24T05:48:25.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="48-Rotate-Image"><a href="#48-Rotate-Image" class="headerlink" title="48.Rotate Image"></a>48.Rotate Image</h1><p>——by yanc</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>You are given an <strong><em>n</em> x <em>n</em> 2D</strong> matrix representing an image.</p><p>Rotate the image by 90 degrees (clockwise).</p><p>您将获得表示图像的 <strong><em>n</em> x <em>n</em> 2D</strong> 矩阵。将图像旋转 90 度（顺时针）。</p><a id="more"></a><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>You have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p><h4 id="Example1："><a href="#Example1：" class="headerlink" title="Example1："></a>Example1：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix = </span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="Example2"><a href="#Example2" class="headerlink" title="Example2:"></a>Example2:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix =</span><br><span class="line">[</span><br><span class="line">  [ <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>,<span class="number">11</span>],</span><br><span class="line">  [ <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>,<span class="number">10</span>],</span><br><span class="line">  [<span class="number">13</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">16</span>]</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">15</span>,<span class="number">13</span>, <span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">14</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">12</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  [<span class="number">16</span>, <span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>问题是叫我们把一个二维矩阵顺时针旋转 90°  ，可以用以下步骤</p><ul><li>先从上到下反转</li><li>再交换对称性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clockwise rotate</span><br><span class="line">first reverse up to down</span><br><span class="line">then swap the symmetry</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span>     <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>     <span class="number">7</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span>  =&gt; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>  =&gt; <span class="number">8</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span>     <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>     <span class="number">9</span> <span class="number">6</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="AC-源代码："><a href="#AC-源代码：" class="headerlink" title="AC 源代码："></a>AC 源代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rows = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="comment">// reverse up to down</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> first = <span class="number">0</span>,last = rows - <span class="number">1</span>; first &lt; last;first++,last--)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = matrix[first];</span><br><span class="line">        matrix[first] = matrix[last];</span><br><span class="line">        matrix[last] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// swap the symmetry</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; cols; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">         matrix[i][j] = matrix[j][i];</span><br><span class="line">         matrix[j][i] = temp;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题解决！Submit！</p><p><strong>Accepted！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;48-Rotate-Image&quot;&gt;&lt;a href=&quot;#48-Rotate-Image&quot; class=&quot;headerlink&quot; title=&quot;48.Rotate Image&quot;&gt;&lt;/a&gt;48.Rotate Image&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;You are given an &lt;strong&gt;&lt;em&gt;n&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt; 2D&lt;/strong&gt; matrix representing an image.&lt;/p&gt;
&lt;p&gt;Rotate the image by 90 degrees (clockwise).&lt;/p&gt;
&lt;p&gt;您将获得表示图像的 &lt;strong&gt;&lt;em&gt;n&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt; 2D&lt;/strong&gt; 矩阵。将图像旋转 90 度（顺时针）。&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://missyanc.github.io/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="https://missyanc.github.io/tags/Leetcode/"/>
    
      <category term="算法" scheme="https://missyanc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>47.Permutations II</title>
    <link href="https://missyanc.github.io/2018/09/24/II/"/>
    <id>https://missyanc.github.io/2018/09/24/II/</id>
    <published>2018-09-24T05:41:40.000Z</published>
    <updated>2018-09-24T05:47:20.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47.Permutations II"></a>47.Permutations II</h1><p>——by yanc</p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p><p><em>给定可能包含重复项的数字集合，返回所有可能的唯一排列。</em></p><a id="more"></a><h4 id="Example："><a href="#Example：" class="headerlink" title="Example："></a>Example：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><ul><li>这里我们先考虑一下，它与第二题唯一的不同在于：在 DFS 函数中，做循环遍历时，如果与当前元素相同的一个元素已经被取用过，则要跳过所有值相同的元素。 </li><li>举个例子：对于序列 &lt;1,1,2,3&gt;。在 DFS 首遍历时，1 作为首元素被加到 list 中，并进行后续元素的添加；那么，当 DFS 跑完第一个分支，遍历到 1 (第二个) 时，这个 1 不再作为首元素添加到 list 中，因为 1 作为首元素的情况已经在第一个分支中考虑过了。 </li><li>为了实现这一剪枝思路，有了如下的解题算法。</li></ul><h4 id="解题算法"><a href="#解题算法" class="headerlink" title="解题算法"></a>解题算法</h4><ol><li>先对给定的序列 nums 进行排序，使得大小相同的元素排在一起。 </li><li>新建一个 used 数组，大小与 nums 相同，用来标记在本次 DFS 读取中，位置 i 的元素是否已经被添加到 list 中了。 </li><li>根据思路可知，我们选择跳过一个数，当且仅当这个数与前一个数相等，并且前一个数未被添加到 list 中。<br>根据以上算法，对题二的代码略做修改，可以得到如下的 AC 代码。<br>(在处理一般性问题时，建议用此算法，毕竟  <strong>Permutation</strong> 只是特殊情况)</li></ol><h3 id="AC-源代码："><a href="#AC-源代码：" class="headerlink" title="AC 源代码："></a>AC 源代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 给定可能包含重复项的数字集合，返回所有可能的唯一排列</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> nums 给的数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 所有排列可能</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">      List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      Arrays.sort(nums);</span><br><span class="line">      backtrack(list,<span class="keyword">new</span> ArrayList&lt;&gt;(),nums,<span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length]);</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 回溯得到所有的排列</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> list 最后的那个排列</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> tempList 临时的某个排列</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> nums 输入的整数数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> used 判断数组中的整数是否加入到了 list 中</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list,List&lt;Integer&gt; tempList,<span class="keyword">int</span>[] nums,<span class="keyword">boolean</span>[] used)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (tempList.size() == nums.length)&#123;</span><br><span class="line">          list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">              <span class="comment">// 当前位置的数已经在List中了</span></span><br><span class="line">              <span class="keyword">if</span>(used[i]) <span class="keyword">continue</span>;</span><br><span class="line">              <span class="comment">// 当前元素与其前一个元素值相同 且 前元素未被加到list中，跳过该元素</span></span><br><span class="line">              <span class="keyword">if</span> (i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; !used[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">              used[i] = <span class="keyword">true</span>;</span><br><span class="line">              tempList.add(nums[i]);</span><br><span class="line">              backtrack(list,tempList,nums,used);</span><br><span class="line">              used[i] = <span class="keyword">false</span>;</span><br><span class="line">              tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>问题解决！Submit！</p><p><strong>Accepted！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;47-Permutations-II&quot;&gt;&lt;a href=&quot;#47-Permutations-II&quot; class=&quot;headerlink&quot; title=&quot;47.Permutations II&quot;&gt;&lt;/a&gt;47.Permutations II&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;Given a collection of numbers that might contain duplicates, return all possible unique permutations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;给定可能包含重复项的数字集合，返回所有可能的唯一排列。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://missyanc.github.io/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="https://missyanc.github.io/tags/Leetcode/"/>
    
      <category term="算法" scheme="https://missyanc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>46.Permutations</title>
    <link href="https://missyanc.github.io/2018/09/24/46-Permutations/"/>
    <id>https://missyanc.github.io/2018/09/24/46-Permutations/</id>
    <published>2018-09-24T05:41:06.000Z</published>
    <updated>2018-09-24T05:46:59.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46.Permutations"></a>46.Permutations</h1><p>——by yanc</p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p><p><em>给定一组不同的整数，返回所有可能的排列。</em></p><a id="more"></a><h4 id="Example："><a href="#Example：" class="headerlink" title="Example："></a>Example：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>将采用<strong>回溯法</strong>解决这个问题。</p><h4 id="回溯是啥"><a href="#回溯是啥" class="headerlink" title="回溯是啥"></a>回溯是啥</h4><p>用爬山来比喻回溯，好比从山脚下找一条爬上山顶的路, 起初有好几条道可走, 当选择一条道走到某处时, 又有几条岔道可供选择, 只能选择其中一条道往前走, 若能这样子顺利爬上山顶则罢了, 否则走到一条绝路上时, 只好返回到最近的一个路口, 重新选择另一条没走过的道往前走。如果该路口的所有路都走不通, 只得从该路口继续回返。照此规则走下去, 要么找到一条到达山顶的路, 要么最终试过所有可能的道, 无法到达山顶</p><p>回溯是一种穷举，但与 brute force 有一些区别，回溯带了两点脑子的，并不多，brute force 一点也没带</p><ul><li>第一点脑子是回溯知道回头；相反如果是 brute force, 发现走不通立刻跳下山摔死，换第二条命从头换一条路走</li><li>第二点脑子是回溯知道剪枝；如果有一条岔路上放了一坨屎，那这条路我们不走，就可以少走很多不必要走的路</li></ul><p>还有一些爱混淆的概念：<strong>递归，回溯，DFS</strong></p><ul><li>回溯是一种找路方法，搜索的时候走不通就回头换路接着走，直到走通了或者发现此山根本不通</li><li>DFS 是一种开路策略，就是一条道先走到头，再往回走一步换一条路走到头，这也是回溯用到的策略。在树和图上回溯时人们叫它 DFS</li><li>递归是一种行为，回溯和递归如出一辙，都是一言不合就回到来时的路，所以一般回溯用递归实现；当然也可以不用，用栈</li></ul><h4 id="此题解释："><a href="#此题解释：" class="headerlink" title="此题解释："></a>此题解释：</h4><p>对于此题我们的路就是要得到所有的排列，那我们就得把所有的路走一遍</p><p>退出这一个岔路就是递归的出口，当 <code>tempList.size() == nums.length</code>时回头</p><p>剪枝即为 <code>if (tempList.contains(nums[i])) continue;</code></p><p><strong>每次进入递归都是一个完整的 <code>for</code> 循环</strong></p><h3 id="AC-源代码："><a href="#AC-源代码：" class="headerlink" title="AC 源代码："></a>AC 源代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决给定一个数组，返回所有可能的排列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 给的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 所有排列可能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// Arrays.sort(nums); // not necessary</span></span><br><span class="line">    backtrack(list,<span class="keyword">new</span> ArrayList&lt;&gt;(),nums);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回溯得到所有的排列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 最后的那个排列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tempList 临时的某个排列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 输入的整数数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list,List&lt;Integer&gt; tempList,<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tempList.size() == nums.length)&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (tempList.contains(nums[i])) <span class="keyword">continue</span>; <span class="comment">// element already exists, skip</span></span><br><span class="line">            tempList.add(nums[i]);</span><br><span class="line">            backtrack(list,tempList,nums);</span><br><span class="line">            tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题解决！Submit！</p><p><strong>Accepted！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;46-Permutations&quot;&gt;&lt;a href=&quot;#46-Permutations&quot; class=&quot;headerlink&quot; title=&quot;46.Permutations&quot;&gt;&lt;/a&gt;46.Permutations&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;Given a collection of &lt;strong&gt;distinct&lt;/strong&gt; integers, return all possible permutations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;给定一组不同的整数，返回所有可能的排列。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://missyanc.github.io/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="https://missyanc.github.io/tags/Leetcode/"/>
    
      <category term="算法" scheme="https://missyanc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux-2018/9/20</title>
    <link href="https://missyanc.github.io/2018/09/20/Linux-2018-9-20/"/>
    <id>https://missyanc.github.io/2018/09/20/Linux-2018-9-20/</id>
    <published>2018-09-20T10:42:22.000Z</published>
    <updated>2018-09-24T05:46:37.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-9-20"><a href="#2018-9-20" class="headerlink" title="2018/9/20"></a>2018/9/20</h1><p>——by yanc</p><h2 id="Ch-Screen-Programing"><a href="#Ch-Screen-Programing" class="headerlink" title="Ch. Screen Programing"></a>Ch. Screen Programing</h2><h3 id="上节课的屏幕编程游戏继续"><a href="#上节课的屏幕编程游戏继续" class="headerlink" title="上节课的屏幕编程游戏继续"></a>上节课的屏幕编程游戏继续</h3><p>对于下面这个个游戏编程而言：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* hello2.c</span></span><br><span class="line"><span class="comment"> * purpose : show how to use curses functions with a loop </span></span><br><span class="line"><span class="comment"> * outline initialize, draw stuff, wrap up</span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        initscr();</span><br><span class="line">        clear();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;LINES;i++)&#123;</span><br><span class="line">                clear();</span><br><span class="line">                move(i,i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                        standout();</span><br><span class="line">                addstr(<span class="string">"Hello world!"</span>);</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                        standend();</span><br><span class="line">                refresh();</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">/* </span></span><br><span class="line"><span class="comment">                 * clear();</span></span><br><span class="line"><span class="comment">                 * if clear() is here, then there are nothing print when loop end.</span></span><br><span class="line"><span class="comment">                 * if clear() is before as now, it will clear the screen first,</span></span><br><span class="line"><span class="comment">                 * and then print, and when loop end, it can also print again in shell. </span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        getch();</span><br><span class="line">        endwin();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>refresh</code> 代价是很大的，一般是覆盖</p><p>于是需要改进，大概过程是</p><ul><li>先打印  “helloworld_”  注意此时光标位置</li><li>再吧光标移回去 “_helloworld”</li><li>再打印与上一样多的 “ ” 覆盖</li></ul><p>该游戏下一个版本 + 人机交互</p><p>给移动加上边界</p><p>usleep  $10^-6s$ 微秒</p><h3 id="interval-timer（itimer）：间隔计时器，时钟编程"><a href="#interval-timer（itimer）：间隔计时器，时钟编程" class="headerlink" title="interval timer（itimer）：间隔计时器，时钟编程"></a>interval timer（itimer）：间隔计时器，时钟编程</h3><p>why sleep can stop? And when a process is sleeping ,can we use other process??</p><p>时间到这是一个信号：SIGALRM，时钟信号？？</p><p><code>alarm(5)</code></p><p><code>pause()</code> 用于将调用进程挂起直至捕捉到信号为止。这个函数很常用，通常可以用于判断信号是否已到</p><p>如下实现了和 <code>sleep(5)</code> 一样的功能<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wakeup</span><span class="params">(<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">signal(SIGALRM,wakeup); <span class="comment">// 忽略 SIGALRM 信号并且当收到该信号是执行 wakeup 函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Sleep 5 second!\n"</span>);</span><br><span class="line"><span class="comment">//sleep(5);</span></span><br><span class="line">alarm(<span class="number">5</span>);</span><br><span class="line">pause();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Wake up!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="signal-函数详解："><a href="#signal-函数详解：" class="headerlink" title="signal() 函数详解："></a>signal() 函数详解：</h4><ol><li>signal() 函数的使用<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt; </span></span></span><br><span class="line"><span class="keyword">void</span> (*signal(<span class="keyword">int</span> signum, <span class="keyword">void</span> (*handler))(<span class="keyword">int</span>)))(<span class="keyword">int</span>);</span><br></pre></td></tr></table></figure></li></ol><p>如果该函数原型不容易理解的话，可以参考下面的分解方式来理解：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typedef void (*sighandler_t)(int)； </span><br><span class="line"><span class="keyword">sighandler_t</span> signal(<span class="keyword">int</span> signum, <span class="keyword">sighandler_t</span> handler));</span><br></pre></td></tr></table></figure></p><p>第一个参数指定信号的值，第二个参数指定针对前面信号值的处理，可以忽略该信号（参数设为 SIG_IGN）；可以采用系统默认方式处理信号 (参数设为 SIG_DFL )；也可以自己实现处理方式 (参数指定一个函数地址)。 如果 signal() 调用成功，返回最后一次为安装信号 signum 而调用 signal() 时的 handler 值；失败则返回 SIG_ERR</p><p><strong>2. signal() 函数的机制</strong></p><p>让我试着简单说一下，现在一个 Linux 的用户进程跑了起来，我们突然按键或者调用 pause() 函数等等进行中断或者进行系统调用，此时用户程序就会进入内核，准确的来说是陷入内核，于是在内核进行具体的内核服务，服务完了之后准备返回给用户进程，让用户进程继续执行。</p><p>对于 signal 函数，进程控制块中设计了一个 signal 的位图信息，其中的每位与具体的 signal 相对应，这与中断机制是保持一致的</p><p>system call 返回。用户进程由于调用了 system call 后，从内核返回用户态时需要检查他拥有的 signal 位图信息表，此时是一个执行点</p><p>中断返回。进程被系统中断打断之后，系统将 CPU 交给进程时，需要检查即将执行进程所拥有的 signal 位图信息表，此时也是一个执行点</p><p><strong>综上所述（小声bb） ： 简单说来就是当用户进程运行到 signal 函数时，把相关他的信息保存在 PCB 上，且定义为一个 signal位图，当内核返回用户程序时就会检查整这个位图，于是就发现 signal 函数啦，然后就执行 signal 函数，signal 就捕捉到了信号，那么进程从内核态返回用户态时执行用户定义的函数</strong></p><blockquote><p>查资料发现：Signal 机制实现的比较灵活，用户进程由于中断或者 system call 陷入内核之后，将断点信息都保存到了堆栈中，在内核返回用户态时，如果存在被触发的 signal，那么直接将待执行的 signal 处理函数 push 到堆栈中，在 CPU 切换到用户模式之后，直接 pop 堆栈就可以执行 signal 处理函数并且返回到用户进程了。Signal 处理函数应用了进程上下文，并且应用实际的中断模拟了进程的软中断过程</p></blockquote><h4 id="setitimer函数："><a href="#setitimer函数：" class="headerlink" title="setitimer函数："></a><strong>setitimer函数：</strong></h4><p>系统里面会为你提供三个间隔计时器</p><ul><li>Real ： 这是真实的时间，过去一秒就是一秒</li><li>Virtual ： 这貌似是对应用户代码的时间</li><li>Prof ： 用户代码和内核代码加起来的时间为 Prof</li></ul><p>怎么使用呢，需要设置两个时间：</p><ul><li>it_value ： 开始时间  <em>双精度  s,us，确保能够取到不同精度的时间</em></li><li>it_interval ： 间隔时间</li><li>在 Linux 中有一个结构体 itimerval 存放 it_value 与 it_interval</li><li>而 it_value 与 it_interval 也是一个结构体</li></ul><p>Linux 中源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">it_interval</span>;</span> <span class="comment">/* next value */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">it_value</span>;</span>    <span class="comment">/* current value */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">    <span class="keyword">time_t</span>      tv_sec;         <span class="comment">/* seconds */</span></span><br><span class="line">    <span class="keyword">suseconds_t</span> tv_usec;        <span class="comment">/* microseconds */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那究竟这个咋就厉害了？请看下列例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* itimertest.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wakeup</span><span class="params">(<span class="keyword">int</span> signum)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Wake up!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">itv</span>;</span></span><br><span class="line">signal(SIGALRM, wakeup);</span><br><span class="line"></span><br><span class="line">itv.it_interval.tv_sec=<span class="number">1</span>;</span><br><span class="line">itv.it_interval.tv_usec=<span class="number">500000</span>;</span><br><span class="line">itv.it_value.tv_sec=<span class="number">5</span>;</span><br><span class="line">itv.it_value.tv_usec=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setitimer 将触发 SIGALRM 信号</span></span><br><span class="line">setitimer(ITIMER_REAL, &amp;itv, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"About to sleep!\n"</span>);</span><br><span class="line">pause();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 让我来试着解释一下这个程序时怎么工作的，结合上面的 signal 函数详解</span></span><br><span class="line"><span class="comment"> * 程序一行一行的运行，到了 signal(SIGALRM, wakeup); 程序在 PCB 中生成一个处理 SIGALRM 的位图可以捕捉该信号</span></span><br><span class="line"><span class="comment"> * 到了 setitimer(ITIMER_REAL, &amp;itv, NULL); 行 ，生成一个定时器，参数讲解看后面</span></span><br><span class="line"><span class="comment"> * 然后此时不管程序之后什么样，程序都会在我设定的 5s 后收到一个 SIGALRM 信号</span></span><br><span class="line"><span class="comment"> * 收到之后，程序就会交给 signal 函数处理该信号</span></span><br><span class="line"><span class="comment"> * 可以试着注释 signal(SIGALRM, wakeup); 和 setitimer(ITIMER_REAL, &amp;itv, NULL); 和 pause(); 看看效果帮助理解</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="setitimer-函数详解："><a href="#setitimer-函数详解：" class="headerlink" title="setitimer 函数详解："></a>setitimer 函数详解：</h4><p>现在的系统中很多程序不再使用 alarm 调用，而是使用 setitimer 调用来设置定时器，用 getitimer 来得到定时器的状态，</p><p>这两个调用的声明格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getitimer</span><span class="params">(<span class="keyword">int</span> which, struct itimerval *curr_value)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setitimer</span><span class="params">(<span class="keyword">int</span> which, <span class="keyword">const</span> struct itimerval *new_value,struct itimerval *old_value)</span></span>;</span><br></pre></td></tr></table></figure><p>参数:</p><ul><li>第一个参数 which 指定定时器类型</li><li>第二个参数是结构 itimerval 的一个实例，结构 itimerval 形式</li><li>第三个参数可不做处理</li></ul><p>返回值: 成功返回 0 失败返回 - 1</p><blockquote><p>基本机制：<br><strong>该系统调用给进程提供了三个定时器，它们各自有其独有的计时域，当其中任何一个到达，就发送一个相应的信号给进程，并使得计时器重新开始。</strong></p></blockquote><p>三个计时器由参数 which 指定，如下所示：</p><ul><li><p>TIMER_REAL：按实际时间计时，计时到达将给进程发送 SIGALRM 信号。</p></li><li><p>ITIMER_VIRTUAL：仅当进程执行时才进行计时。计时到达将发送 SIGVTALRM 信号给进程。</p></li><li><p>ITIMER_PROF：当进程执行时和系统为该进程执行动作时都计时。与 ITIMER_VIR-TUAL 是一对，该定时器经常用来统计进程在用户态和内核态花费的时间。计时到达将发送 SIGPROF 信号给进程</p></li></ul><p>定时器中的参数 value 用来指明定时器的时间，其结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">it_interval</span>;</span> <span class="comment">/*第一次之后每隔多长时间 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">it_value</span>;</span> <span class="comment">/* 第一次调用要多长时间 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该结构中 timeval 结构定义如下：</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">        <span class="keyword">long</span> tv_sec; <span class="comment">/* 秒 */</span></span><br><span class="line">        <span class="keyword">long</span> tv_usec; <span class="comment">/* 微秒，1 秒 = 1000000 微秒 */</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 setitimer 调用中，参数 ovalue 如果不为空，则其中保留的是上次调用设定的值。定时器将 it_value 递减到 0 时，产生一个信号，并将 it_value 的值设定为 it_interval 的值，然后重新开始计时，如此往复。当 it_value 设定为 0 时，计时器停止，或者当它计时到期，而 it_interval 为 0 时停止。调用成功时，返回 0；错误时，返回 - 1，并设置相应的错误代码 errno：</p><p>EFAULT：参数 value 或 ovalue 是无效的指针。</p><p>EINVAL：参数 which 不是 ITIMER_REAL、ITIMER_VIRT 或 ITIMER_PROF 中的一个</p><p><code>ITIMER_REAL</code> 相当于一个软中断</p><hr><h3 id="如何实现一个弹球"><a href="#如何实现一个弹球" class="headerlink" title="如何实现一个弹球"></a>如何实现一个弹球</h3><p>关闭规则模式：</p><ul><li><p>crmode()</p></li><li><p>noecho()</p></li></ul><p>现在能够一维的移动球</p><p>但是我们希望这个球能够在二维中移动</p><hr><h2 id="Ch-Process"><a href="#Ch-Process" class="headerlink" title="Ch.Process"></a>Ch.Process</h2><h3 id="如何查看系统上的进程"><a href="#如何查看系统上的进程" class="headerlink" title="如何查看系统上的进程"></a>如何查看系统上的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">ps -l</span><br><span class="line"></span><br><span class="line">sort &amp; // 可以在后台执行</span><br><span class="line">nice -n 5 sort &amp; // 加上指定的优先数</span><br><span class="line">renice n PID // 给某 PID 的进程加上 n 的优先数 </span><br><span class="line"></span><br><span class="line">ps -e // 查看所有的进程状态，包括后台和其他用户</span><br><span class="line">ps aux</span><br></pre></td></tr></table></figure><p><code>ps -l</code> 得到的进程属性：</p><blockquote><ul><li>S 代表这个程序的状态</li></ul></blockquote><blockquote><ul><li>PPID : Parent PID</li></ul></blockquote><blockquote><ul><li>PRI : 优先级，值越小，优先级越高，一般不好调整，但是可以通过优先数调整，只能增加优先级，唯有超级用户可以提高优先级</li></ul></blockquote><blockquote><ul><li>SZ : 进程占用内存大小</li></ul></blockquote><blockquote><ul><li>TTY：终端</li></ul></blockquote><blockquote><ul><li>WCHAN：目前这个程序是否正在运作当中，若为 - 表示正在运作</li></ul></blockquote><h3 id="进程的生与死"><a href="#进程的生与死" class="headerlink" title="进程的生与死"></a>进程的生与死</h3><ul><li><p>单体无性繁殖</p></li><li><p>如何在一个进程里面执行一个别的进程？？</p><ul><li>execlp(CMD,ARG!1…);</li><li>还有 execvp(CMD,);</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exectest.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"About to execute ls /\n"</span>);</span><br><span class="line">    execlp(<span class="string">"ls"</span>,<span class="string">"ls"</span>,<span class="string">"/"</span>,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Done!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是当我们运行了 exectest.c 之后发现，<code>Done！</code> 并没有打印出来！</p><p>问题来了：<code>Done!</code> 咋就不见了呢</p><p>其实 exec 函数族相当于换脑，把下面的代码的换了</p><h4 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h4><p>所以现在而言直接这样执行是不能这样执行的！我们不能直接换脑，所以我们可以生成一个子进程给他换脑 By fork</p><p>那我们该怎么办呢？？ 于是：<code>fork</code> 出现了！<br>看如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* forktest.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"About to fork.\n"</span>);</span><br><span class="line">        fork(); <span class="comment">// fork 可以创建一个子进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After fork.\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment"> * About to fork.</span></span><br><span class="line"><span class="comment"> * After fork.</span></span><br><span class="line"><span class="comment"> * After fork.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>发现问题：为什么会有两个 After fork 呢？？于是我们想知道他们来自哪里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* forktest2.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am %d. About to fork:\n"</span>, getpid());</span><br><span class="line">fork();</span><br><span class="line"><span class="comment">// 可以 sleep(30) 然后去 ps 找这两个进程的 PID 验证，且 ./a.out &amp; 是后台执行</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After fork. I am %d.\n"</span>, getpid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment"> * I am 45072. About to fork:</span></span><br><span class="line"><span class="comment"> * After fork. I am 45072.</span></span><br><span class="line"><span class="comment"> * After fork. I am 45073.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>那这究竟是为什么呢？为什么子进程也能打印 <code>After fork！</code>？</p><blockquote><p>原来fork() 会完全复制一个父进程，包括代码状态和数据，状态就是此时代码<strong>运行到哪的状态</strong>，这个也不会变</p></blockquote><blockquote><p>父进程和子进程 fork 后是完全独立的，相互竞争计算机的资源</p></blockquote><p>一个小问题，看以下代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* forktest3.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am %d. About to fork:\n"</span>, getpid());</span><br><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After fork. I am %d.\n"</span>, getpid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请问一共有多少个 <code>After fork！</code>呢？</p><p><strong>3 个 fork 是 8 个进程</strong></p><p>但是又问题来了，我们怎么知道<strong>谁是子进程谁是父进程？？</strong></p><p>通过 fork 的返回值</p><ul><li>如果成功创建一个子进程，对于父进程来说返回子进程 ID</li><li>如果成功创建一个子进程，对于子进程来说返回值为 0</li><li>如果为 - 1 表示创建失败</li></ul><p>看下面代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* forktest4.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">int</span> rv;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am %d. About to fork:\n"</span>, getpid());</span><br><span class="line">rv=fork();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>==rv)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am child. I am %d\n"</span>, getpid());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am father. My child is %d\n"</span>, rv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment"> * I am 45450. About to fork:</span></span><br><span class="line"><span class="comment"> * I am father. My child is 45451</span></span><br><span class="line"><span class="comment"> * I am child. I am 45451</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>仔细一看上述程序就会发现一个问题，那就是父进程在子进程之前结束。</p><p>那么我们怎么实现父子进程的协调呢？？？比如要等子进程执行完父进程再继续，就像父进程正在 cook ，然而没有酱油了等子进程去买酱油之后回来才能继续 cook？</p><p>wait() 函数完美的解决了我们的问题，请看如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* forktest5.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">int</span> rv, rv_wait;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"About to execute ls /:\n"</span>);</span><br><span class="line">rv=fork();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>==rv)&#123;</span><br><span class="line">execlp(<span class="string">"ls"</span>,<span class="string">"ls"</span>,<span class="string">"/"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">rv_wait=wait(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is back. Done\n"</span>, rv_wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output ：</span></span><br><span class="line"><span class="comment"> * About to execute ls /:</span></span><br><span class="line"><span class="comment"> * bin   dev  home  lib64mnt  proc  run srv  tmp  var</span></span><br><span class="line"><span class="comment"> * boot  etc  lib mediaopt  root  sbin  sys  usr</span></span><br><span class="line"><span class="comment"> * 46949 is back. Done</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>进程一旦调用了 wait，就立即阻塞自己，由 wait 自动分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成<strong>僵尸的子进程</strong>，wait 就会收集这个子进程的信息， 并把它彻底销毁后返回；如果没有找到这样一个子进程，wait 就会一直阻塞在这里，直到有一个出现为止</p></blockquote><p>wait() 函数详解</p><ol><li>表头文件</li></ol><p>#include&lt;sys/types.h&gt;</p><p>#include&lt;sys/wait.h&gt;</p><ol start="2"><li>定义函数 </li></ol><p>pid_t wait (int * status);</p><ol start="3"><li>函数说明</li></ol><p>wait() 会暂时停止目前进程的执行，直到有信号来到或子进程结束。如果在调用 wait（）时子进程已经结束，则 wait（）会立即返回子进程结束状态值。子进程的结束状态值会由参数 status 返回，而子进程的进程识别码也会一快返回。如果不在意结束状态值，则参数 status 可以设成 NULL。子进程的结束状态值请参考 waitpid（）</p><ol start="4"><li>返回值</li></ol><p>如果执行成功则返回子进程识别码（PID），如果有错误发生则返回 - 1。失败原因存于 errno 中</p><p>此时有一个有趣的现象，请看下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* forktest6.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">int</span> rv, rv_wait;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"About to cook:\n"</span>);</span><br><span class="line">rv=fork();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>==rv)&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Go shopping\n"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">rv_wait=wait(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is back. Done\n"</span>, rv_wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中我们用了 <code>sleep()</code> 函数让子进程一直睡着，然后我们此时在另外一个终端用超级权限 <code>kill</code> 子进程看一看会发生什么？</p><p>发现子进程被 kill 之后依旧和 <code>forktest5.c</code> 一样返回了 <code>46949 is back. Done</code> ，就好比子进程去买酱油，但是路上摔死了，父进程还说酱油买到了，这就未免有些奇怪。那我们该怎么办呢？</p><p>我们可以用 wait() 函数的返回值实现：</p><blockquote><p>前面说过 wait 函数的参数 status 用来保存被收集进程退出时的一些状态，它是一个指向 int 类型的指针。</p></blockquote><blockquote><p>如果参数 status 的值不是 NULL，wait 就会把子进程退出时的状态取出并存入其中，这是一个整数值（int），指出了子进程是正常退出还是被非正常结束的（一个进程也可以被其他进程用信号结束，我们将在以后的文章中介绍），以及正常结束时的返回值，或被哪一个信号结束的等信息。由于这些信息被存放在一个整数的不同二进制位中，所以用常规的方法读取会非常麻烦，人们就设计了一套专门的宏（macro）来完成这项工作，以后会学习这个宏的吧</p></blockquote><p>status 是 16  bit的数</p><ul><li>0 - 7 ： exit value (0 - 255)</li><li>8 : core dump</li><li>9 - 16 : signal</li></ul><p>于是我们有了下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rv, rv_wait;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"About to cook:\n"</span>);</span><br><span class="line">rv=fork();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>==rv)&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Go shopping\n"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line">rv_wait=wait(&amp;status);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is back. status: %0x\n"</span>, rv_wait, status); <span class="comment">// 按 16 进制打印 status</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* About to cook:</span></span><br><span class="line"><span class="comment"> * Go shopping</span></span><br><span class="line"><span class="comment"> * Go shopping</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * 47711 is back. status: a00</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>为什么是 <code>a00</code> 呢？因为我们指定了 <code>return 10;</code> 且 status 是一个 16 位的数，所以 16 进制得 a00</p><p><em>Linux 在终端敲命令其实是 shell 的一个 fork</em></p><h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h4><p>1 号进程为 init 进程，是所有进程的父进程，如果我们杀了 cook （父）进程，那么  shopping 进程则会吧 init 进程作为父进程，此时被杀了父进程的 shopping 进程也叫<strong>孤儿进程</strong></p><p><strong>Zombie 进程</strong>：僵尸进程(defunct)，是因为程序没有调用 wait() 进程回收</p><p>SIGCHLD 为忽略僵尸进程</p><p>看以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* forktest8.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rv, rv_wait;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"About to cook:\n"</span>);</span><br><span class="line">rv=fork();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>==rv)&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">signal(SIGCHLD, SIG_IGN); <span class="comment">// 忽略 SIGCHID 信号</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试着注释 <code>signal(SIGCHLD, SIG_IGN); // 忽略 SIGCHID 信号</code> 这一行，然后运行再 <code>^c</code> 中断再 <code>ps -el</code> 看进程就会发现有一个 <code>Z</code> 标志僵尸进程。</p><h3 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h3><p>下面就让我用一些形象的比喻，来对进程短暂的一生作一个小小的总结：</p><p>随着一句 fork，一个新进程呱呱落地，但它这时只是老进程的一个克隆。</p><p>然后随着 exec，新进程脱胎换骨，离家独立，开始了为人民服务的职业生涯。</p><p>人有生老病死，进程也一样，它可以是自然死亡，即运行到 main 函数的最后一个 “}”，从容地离我们而去；也可以是自杀，自杀有 2 种方式，一种是调用 exit 函数，一种是在 main 函数内使用 return，无论哪一种方式，它都可以留下遗书，放在返回值里保留下来；它还甚至能可被谋杀，被其它进程通过另外一些方式结束他的生命。</p><p>进程死掉以后，会留下一具僵尸，wait 和 waitpid 充当了殓尸工，把僵尸推去火化，使其最终归于无形。</p><p>这就是进程完整的一生。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018-9-20&quot;&gt;&lt;a href=&quot;#2018-9-20&quot; class=&quot;headerlink&quot; title=&quot;2018/9/20&quot;&gt;&lt;/a&gt;2018/9/20&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;h2 id=&quot;Ch-Screen-Programing&quot;&gt;&lt;a href=&quot;#Ch-Screen-Programing&quot; class=&quot;headerlink&quot; title=&quot;Ch. Screen Programing&quot;&gt;&lt;/a&gt;Ch. Screen Programing&lt;/h2&gt;&lt;h3 id=&quot;上节课的屏幕编程游戏继续&quot;&gt;&lt;a href=&quot;#上节课的屏幕编程游戏继续&quot; class=&quot;headerlink&quot; title=&quot;上节课的屏幕编程游戏继续&quot;&gt;&lt;/a&gt;上节课的屏幕编程游戏继续&lt;/h3&gt;&lt;p&gt;对于下面这个个游戏编程而言：&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://missyanc.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://missyanc.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>R-first-chapter</title>
    <link href="https://missyanc.github.io/2018/09/19/R-first-chapter/"/>
    <id>https://missyanc.github.io/2018/09/19/R-first-chapter/</id>
    <published>2018-09-19T03:25:21.000Z</published>
    <updated>2018-09-24T05:46:47.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-认识数据分析与-R-语言"><a href="#第一章-认识数据分析与-R-语言" class="headerlink" title="第一章 认识数据分析与 R 语言"></a>第一章 认识数据分析与 R 语言</h2><p>—— by yanc</p><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><p>数据分析是指用适当的统计分析方法对收集来的大量数据进行分析，提取有用信息和形成结论而对数据加以详细研究和概括总结的过程</p><a id="more"></a><h4 id="数据分析的原则："><a href="#数据分析的原则：" class="headerlink" title="数据分析的原则："></a>数据分析的原则：</h4><ol><li>数据分析是为了验证假设的问题，必须提供必要的数据验证。即构建完分析模型后，需要利用测试数据验证模型正确性。</li><li>数据分析是为了发现更多问题，并找到深层次原因</li><li>不能为了做数据分析而分析。必须有明确的问题或目</li></ol><h4 id="数据分析的步骤"><a href="#数据分析的步骤" class="headerlink" title="数据分析的步骤"></a>数据分析的步骤</h4><ol><li><p>探索性数据分析</p><p> 找到数据中隐含信息；探索规律性的可能的形式（探索方向和方式）；通常需要数据清洗和整合</p></li><li><p>模型选定分析</p><p> 通过定量分析，提出一类或几类可能的模型；再进一步分析，确定一类适合的模型</p></li><li><p>推断分析</p><p> 使用数理统计方法， 对所确定模型或估计的可靠程度和精度做出推断</p></li></ol><h4 id="传统数据分析过程"><a href="#传统数据分析过程" class="headerlink" title="传统数据分析过程"></a>传统数据分析过程</h4><ol><li>明确目标</li><li>搜集数据</li><li><p>加工整理</p><p> 缺失值处理、数据分组、数据取值转换……</p></li><li>选择方法</li><li>解释结果</li></ol><h4 id="“大数据”分析过程"><a href="#“大数据”分析过程" class="headerlink" title="“大数据”分析过程"></a>“大数据”分析过程</h4><ol><li>数据采集</li><li><p>预处理</p><p> 数据清洗等。</p></li><li><p>统计和分析</p><p> 可以满足大多数常见的分析需求</p></li><li><p>数据挖掘</p><p> 与统计分析不同，数据挖掘一般没有什么预先设定好的主题</p></li></ol><h3 id="R-语言简介"><a href="#R-语言简介" class="headerlink" title="R 语言简介"></a>R 语言简介</h3><ul><li><p>R是用于统计分析和绘图的编程语言和软件环境</p></li><li><p>R是 GNU 包，因此是自由软件。源码使用 C、Fortran 和 R 进行编写</p></li></ul><h4 id="R语言历史"><a href="#R语言历史" class="headerlink" title="R语言历史"></a>R语言历史</h4><ul><li>R语言是S语言的一种方言</li><li>1976年，贝尔实验室的John Chambers 开发S语言，以替代昂贵的 SPSS 和 SAS 工具</li><li>1992年，新西兰奥克兰大学两位统计学教授 Ross Ihaka 和 Robert Gentleman 开发，Chambers 也是开发成员</li></ul><h4 id="R-的优势"><a href="#R-的优势" class="headerlink" title="R 的优势"></a>R 的优势</h4><ul><li>统计学家发明的：全面的统计研究平台，提供格式各样的数据分析技术</li><li>开源：可以自己修改（包和函数）；免费</li><li><strong>交互式数据分析</strong> <code>why？？？</code></li><li>可以从多中数据源导入数据，存在 bug</li><li>新算法（新的包）会迅速在R中实现</li><li>轻量级，安装文件小（不超过100M）</li><li>兼容不同的OS</li></ul><h4 id="R的劣势"><a href="#R的劣势" class="headerlink" title="R的劣势"></a>R的劣势</h4><ul><li>统计学家发明的：语法和一般程序设计语言差别很大，学习曲线陡峭，对于程序员来说“奇怪的”术语</li><li>开源导致 package 的质量、版本兼容性等问题</li><li>内存管理、速度与效率问题</li><li>不能直接利用R开发应用程序</li></ul><h4 id="R-的获取和安装"><a href="#R-的获取和安装" class="headerlink" title="R 的获取和安装"></a>R 的获取和安装</h4><ul><li>R 可以在 <code>CRAN（Comprehensive RArchive Network）http://cran.r-project.org</code> 上免费下载。Linux、Mac OS X 和 Windows 都有相应编译好的二进制版本</li></ul><h4 id="R的使用"><a href="#R的使用" class="headerlink" title="R的使用"></a>R的使用</h4><ul><li>R是一种区分大小写的解释型语言 eg.<em>shell</em></li><li><p>R中的多数功能是由程序内置函数和用户自编函数提供的，一次交互式会话期间的所有数据对象都被保存在内存中。一些基本函数是默认直接可用的，而其他高级函数则包含于按需加载的程序包中</p><blockquote><p><strong>什么是解释性语言、脚本语言。一行一行的解释</strong></p></blockquote></li><li><p>R语句由函数和赋值构成。R使用 &lt;-，而不是传统的 = 作为赋值符号。注释由符号 # 开头</p><blockquote><p>x = x + 1 与 x &lt;- x + 1，前者不科学</p></blockquote></li><li>Windows 从开始菜单中启动R。Mac需要双击应用程序文件夹中的R图标。Linux 在终端命令提示符下敲入R并回车</li></ul><p>一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Listing 1.1 - A Sample R session</span><br><span class="line">age &lt;- c(1,3,5,2,11,9,3,9,12,3)</span><br><span class="line">weight&lt;-c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)</span><br><span class="line">mean(weight) #均值</span><br><span class="line">sd(weight) #标准差</span><br><span class="line">cor(age,weight) #相关度</span><br><span class="line">plot(age,weight) #画图</span><br></pre></td></tr></table></figure><h4 id="R-获取帮助"><a href="#R-获取帮助" class="headerlink" title="R 获取帮助"></a>R 获取帮助</h4><ul><li>R的内置帮助系统提供了当前已安装包中所有函数的细节、参考文献以及使用示例<ul><li><code>help.start()</code> 打开帮助文档首页</li><li><code>help(&quot;foo&quot;)或?foo</code> 查看函数 <code>foo</code> 的帮助（引号可以省略）</li><li><code>help.search(&quot;foo&quot;)</code> 或 <code>??foo</code> 以 <code>foo</code>为关键词搜索本地帮助文档</li><li><code>example(&quot;foo&quot;)</code> 函数 <code>foo</code> 的使用示例（引号可以省略）</li><li><code>RSiteSearch(&quot;foo&quot;)</code> 以 <code>foo</code> 为关键词搜索在线文档和邮件列表存档</li><li><code>apropos(&quot;foo&quot;, mode=&quot;function&quot;)</code> 列出名称中含有 <code>foo</code> 的所有可用函数</li><li><code>data()</code> 列出当前已加载包中所含的所有可用示例数据集</li><li><code>vignette()</code> 列出当前已安装包中所有可用的 vignette 文档(一般是 PDF 文章)</li><li><code>vignette(&quot;foo&quot;)</code> 为主题 <code>foo</code> 显示指定的 vignette 文档</li></ul></li></ul><h4 id="工作空间（workspace）"><a href="#工作空间（workspace）" class="headerlink" title="工作空间（workspace）"></a>工作空间（workspace）</h4><ul><li><p>工作空间就是当前R的工作环境，它储存着所有用户定义的对象（向量、矩阵、函数、数据框、列表。可以将当前工作空间保存到一个镜像中，并在下次启动R时自动载入它</p></li><li><p>当前的工作**目录（working directory）是 R 用来读取文件和保存结果的默认目录</p></li></ul><h4 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h4><ul><li>输入：函数 <code>source(&quot;filename&quot;)</code> 可在当前会话中执行一个脚本</li><li>文本输出：函数 <code>sink(&quot;filename&quot;)</code> 将输出重定向到文件filename中</li><li>图形输出</li></ul><h4 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h4><ul><li>包是R函数、数据、预编译代码以一种定义完善的格式组成的集合。计算机上存储包的目录称为库（library）。</li><li>函数 <code>library()</code> 则可以显示库中有哪些包</li><li>目前有 2500 多个包可从 <code>http://cran.rproject.org/web/packages</code>下载。这些包提供了横跨各种领域的新功能，包括分析地理数据、处理蛋白质质谱，甚至是心理测验分析的功能</li></ul><ol><li>包的安装</li></ol><ul><li>执行 <code>install.packages()</code> 将显示一个 CRAN 镜像站点的列表，选择其中一个镜像站点之后，将看到所有可用包的列表，选择其中的一个包即可进行下载和安装</li><li>例如，可以用可以使用命令 <code>install.packages(&quot;gclus&quot;)</code> 来下载和安装 gclus 包（注意有引号）。</li></ul><ol start="2"><li>包的载入</li></ol><ul><li>要在R会话中使用包，需要用 <code>library()</code> 命令载入这个包</li><li>例如，要使用 gclus 包，执行命令 <code>library(gclus)</code> 即可（注意没有引号）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-认识数据分析与-R-语言&quot;&gt;&lt;a href=&quot;#第一章-认识数据分析与-R-语言&quot; class=&quot;headerlink&quot; title=&quot;第一章 认识数据分析与 R 语言&quot;&gt;&lt;/a&gt;第一章 认识数据分析与 R 语言&lt;/h2&gt;&lt;p&gt;—— by yanc&lt;/p&gt;
&lt;h3 id=&quot;数据分析&quot;&gt;&lt;a href=&quot;#数据分析&quot; class=&quot;headerlink&quot; title=&quot;数据分析&quot;&gt;&lt;/a&gt;数据分析&lt;/h3&gt;&lt;p&gt;数据分析是指用适当的统计分析方法对收集来的大量数据进行分析，提取有用信息和形成结论而对数据加以详细研究和概括总结的过程&lt;/p&gt;
    
    </summary>
    
      <category term="R 语言" scheme="https://missyanc.github.io/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="R 语言" scheme="https://missyanc.github.io/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>49.Group Anagrams</title>
    <link href="https://missyanc.github.io/2018/09/18/Anagrams/"/>
    <id>https://missyanc.github.io/2018/09/18/Anagrams/</id>
    <published>2018-09-18T14:59:49.000Z</published>
    <updated>2018-09-24T05:46:05.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a>49. Group Anagrams</h1><p>——by yanc</p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>Given an array of strings, group anagrams together.</p><h4 id="Example："><a href="#Example：" class="headerlink" title="Example："></a>Example：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Note："><a href="#Note：" class="headerlink" title="Note："></a>Note：</h4><ul><li>All inputs will be in lowercase.</li><li>The order of your output does not matter.</li></ul><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>分析：<strong>Two strings are anagrams if and only if their sorted strings are equal</strong>.</p><p>用 Map 实现：维护一个 map <code>ans : {String -&gt; List}</code> ，每一个 <code>Key</code> 为一个排序好的 <code>string</code>，并且每一个 <code>value</code> 为从最初输入的字符串 <code>Lis</code> 里排序了且 <code>equal to Key</code> 的 <code>List</code></p><h3 id="Java代码实现："><a href="#Java代码实现：" class="headerlink" title="Java代码实现："></a>Java代码实现：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public  List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs)&#123;</span><br><span class="line">        if (strs.length == 0) return new ArrayList();</span><br><span class="line">        Map&lt;String,List&gt; ans = new HashMap&lt;String, List&gt;();</span><br><span class="line"></span><br><span class="line">        for (String s: strs)&#123;</span><br><span class="line">            char[] chars = s.toCharArray();</span><br><span class="line">            Arrays.sort(chars); // 把他们排序</span><br><span class="line">            String key = String.valueOf(chars);</span><br><span class="line">            if (!ans.containsKey(key))</span><br><span class="line">                ans.put(key,new ArrayList());</span><br><span class="line">            ans.get(key).add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        return new ArrayList(ans.values());//返回所有的 List&lt;String&gt;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Ouch！Accepted！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;49-Group-Anagrams&quot;&gt;&lt;a href=&quot;#49-Group-Anagrams&quot; class=&quot;headerlink&quot; title=&quot;49. Group Anagrams&quot;&gt;&lt;/a&gt;49. Group Anagrams&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;Given an array of strings, group anagrams together.&lt;/p&gt;
&lt;h4 id=&quot;Example：&quot;&gt;&lt;a href=&quot;#Example：&quot; class=&quot;headerlink&quot; title=&quot;Example：&quot;&gt;&lt;/a&gt;Example：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: [&amp;quot;eat&amp;quot;, &amp;quot;tea&amp;quot;, &amp;quot;tan&amp;quot;, &amp;quot;ate&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;bat&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;ate&amp;quot;,&amp;quot;eat&amp;quot;,&amp;quot;tea&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;nat&amp;quot;,&amp;quot;tan&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;bat&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://missyanc.github.io/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="https://missyanc.github.io/tags/Leetcode/"/>
    
      <category term="算法" scheme="https://missyanc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>50.pow(x,n)</title>
    <link href="https://missyanc.github.io/2018/09/17/50-pow-xn/"/>
    <id>https://missyanc.github.io/2018/09/17/50-pow-xn/</id>
    <published>2018-09-17T08:50:45.000Z</published>
    <updated>2018-09-24T05:46:14.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50.Pow(x,n)"></a>50.Pow(x,n)</h1><p>——by yanc</p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>Implement <em>pow(x, n)</em>, which calculates x raised to the power n(x^n)</p><a id="more"></a><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.00000, 10</span><br><span class="line">Output: 1024.00000</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.10000, 3</span><br><span class="line">Output: 9.26100</span><br></pre></td></tr></table></figure><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.00000, -2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: 2^-2 = 1/2^2 = 1/4 = 0.25</span><br></pre></td></tr></table></figure><h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><ul><li>-100.0 &lt; x &lt; 100.0</li><li>n is a 32-bit signed integer, within the range [−2^31, 2^31 − 1]</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我的第一想法是用迭代，用一个变量 result 保存结果然后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (n &gt; 0)</span><br><span class="line">    for (int i =0 ;i &lt; n;i++) result = result * x;</span><br><span class="line">else if (n &lt; 0)</span><br><span class="line">    for (int i =0 ;i &lt; -n;i++) result = result * (1/x);</span><br><span class="line">else return result = 1;</span><br></pre></td></tr></table></figure><p>ok,看完发现没问题，submit！</p><p>Ouch！超时了，完蛋，明显不行。</p><p>换一个思路：<strong>递归</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">double res = 0;</span><br><span class="line">if (n == 0) return 1;</span><br><span class="line">if (n &lt; 0)&#123;</span><br><span class="line">    n = -n;</span><br><span class="line">    x = 1 / x;</span><br><span class="line">    &#125;</span><br><span class="line">return (n % 2 == 0) ? pow(x*x,n/2) : x * pow(x*x,n/2);</span><br></pre></td></tr></table></figure><p>ok，没问题，submit！</p><p>Ouch！说当输入是 <code>(2,Integer.MIN_VALUE)</code>  时返回了一个 <code>Infinity</code> ,查了查发现这是说无限。</p><p>emmmm 开始去查资料找原因，发现是代码第4行，<code>-n</code> 超过了值，java 中整型的数 最大为 <code>2^31 - 1</code> 而  <code>-Integer.MIN_VALUE</code> 恰好比 <code>2^31 - 1</code> 多 1，所以越界</p><p>于是终极 <strong>Accepted代码为</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static double pow(double x,int n)&#123;</span><br><span class="line">   double res = 0;</span><br><span class="line">   if (n &lt; 0)&#123;</span><br><span class="line">       n = -(n + 1);</span><br><span class="line">       x = 1 / x;</span><br><span class="line">       res = (n % 2 == 0) ? pow(x*x,n/2) : x * pow(x*x,n/2);</span><br><span class="line">       return  res * x;</span><br><span class="line">       &#125;else</span><br><span class="line">   return (n % 2 == 0) ? pow(x*x,n/2) : x * pow(x*x,n/2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>————————————-分界线：知识补充————————————</p><p>问题解决，发现是自己的基础知识不够引起的，于是开始补习：</p><h3 id="Java-中的整型"><a href="#Java-中的整型" class="headerlink" title="Java 中的整型"></a>Java 中的整型</h3><p>Java 中有四种整型数据，分别是 <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>。 它们的区别表现在单个数据所占的字节数以及取值范围的不同。具体见下表:</p><table><thead><tr><th>类型</th><th>字节数</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-128~127</td></tr><tr><td>short</td><td>2</td><td>-32768~32767</td></tr><tr><td>int</td><td>4</td><td>-2147483648~2147483647</td></tr><tr><td>long</td><td>8</td><td>-9223372036854775808~9223372036854775807</td></tr></tbody></table><p>值得一提的是，在 <code>Java</code>中，没有无符号位的整型数据，即所有的整型数据都是可以表示正数和负数的</p><h3 id="Java-中的进制"><a href="#Java-中的进制" class="headerlink" title="Java 中的进制"></a>Java 中的进制</h3><p>和其他编程语言一样，Java 中常用的进制位二进制、八进制、十进制、十六进制。其实八进制也不是太经常使用</p><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><p>二进制的表示只包含 0 和 1 两种符号。在 Java 中，二进制的表示格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int x = 0b10101010</span><br></pre></td></tr></table></figure><p>即在二进制数前面加了 <code>0b</code></p><h4 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h4><p>八进制的表示包含 0、1、2、3、4、5、6、7 这八种符号。在 Java 中，八进制的表示格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int x = 01010101010</span><br></pre></td></tr></table></figure><p>即在八进制数前面加了 <code>0</code>. 显然这种表示方法很容易弄混，一定得小心对待</p><h4 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h4><p>十进制即为日常数字使用的进制，它的表示包含 0、1、2、3、4、5、6、7、8、9 这十种符号。十进制的表示不需要特别的格式，和平时使用的数字表示一样</p><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><p>十六进制的表示包含 0、1、2、3、4、5、6、7、8、9、a、b、c、d、e、f 这十六中符号。在 Java 中，十六进制的表示格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int x = 0x10101010</span><br></pre></td></tr></table></figure><p>即在十六进制数前加 <code>0x</code>.<br>在任何进制表示的数字后面加上符号 <code>L</code> 即表示该数字为 <code>long</code> 型。此外， 从 <code>Java7</code> 以后，表示二进制、八进制、十进制、十六进制数的时候，可以在数中添加下划线以方便阅读。经过尝试，发现在数的最前面和最后面添加下划线是会报错的，即下划线只能添加在数的中间，不能加在数字的两端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 0b1010_1010</span><br><span class="line">int b = 01010_1010</span><br><span class="line">int c = 1010_1010</span><br><span class="line">int d = 0x1010_1010</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;50-Pow-x-n&quot;&gt;&lt;a href=&quot;#50-Pow-x-n&quot; class=&quot;headerlink&quot; title=&quot;50.Pow(x,n)&quot;&gt;&lt;/a&gt;50.Pow(x,n)&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;Implement &lt;em&gt;pow(x, n)&lt;/em&gt;, which calculates x raised to the power n(x^n)&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://missyanc.github.io/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="https://missyanc.github.io/tags/Leetcode/"/>
    
      <category term="算法" scheme="https://missyanc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>软件需求分析与设计</title>
    <link href="https://missyanc.github.io/2018/09/16/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    <id>https://missyanc.github.io/2018/09/16/软件需求分析与设计/</id>
    <published>2018-09-16T04:06:49.000Z</published>
    <updated>2018-09-24T05:48:52.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个项目的里程碑"><a href="#一个项目的里程碑" class="headerlink" title="一个项目的里程碑"></a>一个项目的里程碑</h2><p>——by yanc</p><ol><li>第一个里程碑：产品确定，合同的签订（就像是软件的生）</li><li>软件的设计模型</li><li>第二个里程碑：软件的上线</li><li>最后一个里程碑：软件下架，不再使用（软件的死）</li></ol><p><strong>本门课讲的就是从软件合同签订到软件的设计模型确定这一个过程</strong></p><blockquote><p>一个问题：软件的架构设计，这样的人才很少。在美国一个不成文的规定是：只有从事软件行业8年以上的人才有资格成为软件架构师</p></blockquote><a id="more"></a><h2 id="第一章-软件进程"><a href="#第一章-软件进程" class="headerlink" title="第一章 软件进程"></a>第一章 软件进程</h2><p>软件开发的本质，通过人类的干预是解决不了的</p><ol><li>复杂性</li><li>一致性</li><li>可变性</li><li>不可见性</li></ol><p>软件开发的偶然性因素，通过人工的干预是可以改善的</p><ol><li>利益干系人</li><li>软件工程</li><li>模型/建模</li></ol><p>利益干系人：Stakeholder（股票持有人）</p><ul><li>客户</li><li>老板</li><li>开发人员</li><li>投资人</li><li>股东</li><li>用户</li><li>竞争对手</li><li><strong>PM</strong></li><li>家人</li><li>政府</li></ul><p>软件过程</p><ul><li>顺序</li><li>成果物</li><li>分配给具体的人</li><li>鉴定标准</li></ul><p>软件开发模式（软件过程）</p><ul><li>瀑布模型</li><li>敏捷开发</li><li>增量迭代模型</li><li>RVP</li></ul><p>软件开发方法</p><ul><li>面向对象方法</li><li>面向功能方法（结构化）</li><li>面向数据方法</li><li>面向过程方法</li><li>…</li></ul><p>面向对象的第一个原则：</p><p>OCP原则，开发封闭原则：代码是可增加的，不可修改的  <strong>也就是面向接口编程</strong></p><p>面向对象和结构化方法的区别</p><ul><li>分解方法<ul><li>功能</li><li>对象</li></ul></li><li>代码层次</li><li>开发方法</li></ul><hr><p>一个栗子：五子棋程序</p><p>结构化的分解：</p><ul><li>开始</li><li>黑方先行</li><li>绘制棋盘</li><li>判断输赢</li><li>轮到白子</li><li>绘制棋盘</li><li>判断输赢</li><li>返回步骤2</li><li>输出结果</li></ul><p>面向对象分解：</p><ul><li>main</li><li>棋子<ul><li>移动</li></ul></li><li>棋盘<ul><li>绘制</li></ul></li><li>规则系统：提取出来做一个配置文件<ul><li>判断输赢</li></ul></li></ul><p><em>那么问题来了，我想做一个围棋系统，面向对象只需要换一个配置文件就行</em></p><p><em>那么问题又来了，我想做一个国际象棋，对于面向对象，把棋子抽象成基类，五子棋和国际象棋继承就好啦，那就是棋子的配置图片不一样就行。</em></p><p>—————————————-分界线，上课第一周—————————————</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个项目的里程碑&quot;&gt;&lt;a href=&quot;#一个项目的里程碑&quot; class=&quot;headerlink&quot; title=&quot;一个项目的里程碑&quot;&gt;&lt;/a&gt;一个项目的里程碑&lt;/h2&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个里程碑：产品确定，合同的签订（就像是软件的生）&lt;/li&gt;
&lt;li&gt;软件的设计模型&lt;/li&gt;
&lt;li&gt;第二个里程碑：软件的上线&lt;/li&gt;
&lt;li&gt;最后一个里程碑：软件下架，不再使用（软件的死）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;本门课讲的就是从软件合同签订到软件的设计模型确定这一个过程&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个问题：软件的架构设计，这样的人才很少。在美国一个不成文的规定是：只有从事软件行业8年以上的人才有资格成为软件架构师&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="软件课程" scheme="https://missyanc.github.io/categories/%E8%BD%AF%E4%BB%B6%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="课程" scheme="https://missyanc.github.io/tags/%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="需求分析" scheme="https://missyanc.github.io/tags/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>关于我的Hexo配置记录</title>
    <link href="https://missyanc.github.io/2018/09/13/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84Hexo%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://missyanc.github.io/2018/09/13/关于我的Hexo配置记录/</id>
    <published>2018-09-13T15:09:09.000Z</published>
    <updated>2018-09-14T03:46:13.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于我的-Hexo-配置记录"><a href="#关于我的-Hexo-配置记录" class="headerlink" title="关于我的 Hexo 配置记录"></a>关于我的 Hexo 配置记录</h1><h3 id="配置背景动画"><a href="#配置背景动画" class="headerlink" title="配置背景动画"></a>配置背景动画</h3><ul><li>设置 canvas_nest 无效</li></ul><blockquote><p>如果 next 主题版本在 5.1.1 以上的话，直接在themes/next目录下，将配置文件_config.yml中找到canvas_nest: false，改为canvas_nest: true即可，但是博主配置了无效<br> -</p></blockquote><h3 id="配置背景图片"><a href="#配置背景图片" class="headerlink" title="配置背景图片"></a>配置背景图片</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于我的-Hexo-配置记录&quot;&gt;&lt;a href=&quot;#关于我的-Hexo-配置记录&quot; class=&quot;headerlink&quot; title=&quot;关于我的 Hexo 配置记录&quot;&gt;&lt;/a&gt;关于我的 Hexo 配置记录&lt;/h1&gt;&lt;h3 id=&quot;配置背景动画&quot;&gt;&lt;a href=&quot;#配置背景动画&quot; class=&quot;headerlink&quot; title=&quot;配置背景动画&quot;&gt;&lt;/a&gt;配置背景动画&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设置 canvas_nest 无效&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果 next 主题版本在 5.1.1 以上的话，直接在themes/next目录下，将配置文件_config.yml中找到canvas_nest: false，改为canvas_nest: true即可，但是博主配置了无效&lt;br&gt; -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;配置背景图片&quot;&gt;&lt;a href=&quot;#配置背景图片&quot; class=&quot;headerlink&quot; title=&quot;配置背景图片&quot;&gt;&lt;/a&gt;配置背景图片&lt;/h3&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://missyanc.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://missyanc.github.io/tags/Hexo/"/>
    
      <category term="技术学习" scheme="https://missyanc.github.io/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 如何从云服务器转到 GitHub Pages+Windows 本地部署</title>
    <link href="https://missyanc.github.io/2018/09/12/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/"/>
    <id>https://missyanc.github.io/2018/09/12/本地部署/</id>
    <published>2018-09-12T13:50:24.000Z</published>
    <updated>2018-09-24T05:48:42.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-Hexo-如何从云服务器转到-GitHub-Pages-Windows-本地部署"><a href="#关于-Hexo-如何从云服务器转到-GitHub-Pages-Windows-本地部署" class="headerlink" title="关于 Hexo 如何从云服务器转到 GitHub Pages+Windows 本地部署"></a>关于 Hexo 如何从云服务器转到 GitHub Pages+Windows 本地部署</h1><p>——by yanc</p><p><strong>后来考虑到我的云服务器的优惠就是两年，博主现在大一，等以后大学毕业了阿里云的云服务器也不会再是9.9元/月了，而是一千多大洋，所以到时候买不买还是一个问题，于是在花了很多天捣鼓好了云服务器的配置之后毅然决然的抛弃了他转而用 GitHub Pages 部署我的 Hexo博客，毕竟想一直用下去嘛~</strong></p><h2 id="先总体说一下我的大概的步骤吧"><a href="#先总体说一下我的大概的步骤吧" class="headerlink" title="先总体说一下我的大概的步骤吧"></a>先总体说一下我的大概的步骤吧</h2><ul><li>首先当然是搭建好本地环境</li><li>完成本地 Hexo 的安装和测试</li><li>把云服务器上的关于 Hexo 博客的文件夹整个拷贝到本地并且替代本地的 Hexo 文件夹</li><li>部署 Windows 本地的 Hexo 博客到 GitHub 上</li></ul><p><strong>这样做下来弄好之后，新的博客一点没变，所有配置依旧玩好无缺，所有博文也是丝毫不差</strong></p><a id="more"></a><h2 id="搭建本地环境"><a href="#搭建本地环境" class="headerlink" title="搭建本地环境"></a>搭建本地环境</h2><h3 id="1-摘要，这儿是默认大家都有了-GitHub-账号，要是没有请去注册一个再来"><a href="#1-摘要，这儿是默认大家都有了-GitHub-账号，要是没有请去注册一个再来" class="headerlink" title="1. 摘要，这儿是默认大家都有了 GitHub 账号，要是没有请去注册一个再来"></a>1. 摘要，这儿是默认大家都有了 GitHub 账号，要是没有请去注册一个再来</h3><ul><li><p><strong>需要安装好 Git Bash</strong></p></li><li><p><strong>需要安装 Node.js</strong></p></li><li><p><strong>需要安装 Hexo</strong></p></li></ul><h3 id="2-安装-Git-Bash"><a href="#2-安装-Git-Bash" class="headerlink" title="2. 安装 Git Bash"></a>2. 安装 Git Bash</h3><ul><li><p>去官网下载 Git 客户端：<a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></p>  <div align="center"><br>  <img width="550" height="320" src="https://upload-images.jianshu.io/upload_images/1628444-6b40d70fcd6ff5a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp"><br>  </div></li><li><p>安装 Git 客户端：Windows 用户直接 Next 就可以了。Mac 和 Linxu 系统的用户可通过命令方式安装，这里不详细介绍了</p></li></ul><h3 id="3-安装-Node-js"><a href="#3-安装-Node-js" class="headerlink" title="3. 安装 Node.js"></a>3. 安装 Node.js</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js 官网</a></li></ul><h3 id="4-创建-GitHub-仓库"><a href="#4-创建-GitHub-仓库" class="headerlink" title="4. 创建 GitHub 仓库"></a>4. 创建 GitHub 仓库</h3><ul><li><p>登录进入 GitHub 进入创建仓库页面，这个没什么好说的</p></li><li><p>填写创建仓库信息：</p></li><li><p><strong>仓库名称必须是：你的用户名.github.io，比如博主 GitHub 的名字为 Missyanc，仓库名称就为：Missyanc.github.io，以后再解释为什么</strong></p></li><li>填写好相关信息，点击 <strong>Create repository(创建仓库)</strong> 按钮。</li></ul><h3 id="5-配置-SSH"><a href="#5-配置-SSH" class="headerlink" title="5. 配置 SSH"></a>5. 配置 SSH</h3><ul><li>打开 Git Bash 终端</li><li><p>设置 user name 和 email：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">$ git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>一般情况下是不需要密码的，所以，接下来直接回车就好</p></li><li>此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的 ssh 密钥文件 id_rsa 和 <strong>id_rsa.pub</strong></li><li><em>注：id_rsa 文件是私钥，要妥善保管，id_rsa.pub 是公钥文件。</em></li><li><p>添加公钥到 github：点击用户头像，然后点击显示的 Settings(设置) 选项</p>  <div align="center"><br>  <img width="150" height="280" src="https://help.github.com/assets/images/help/settings/userbar-account-settings.png"><br>  </div></li><li><p>在用户设置栏，点击 <strong>SSH and GPG keys</strong> 选项，然后点击 <strong>New SSH key(新建 SSH)</strong> 按钮</p></li><li><p>Titel 可以随便取一个，将 <strong>id_rsa.pub</strong> 中的内容复制到 Key 文本框中，然后点击 <strong>Add SSH key(添加 SSH)</strong> 按钮</p></li><li>可以测试一下 SSH ：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ul><p><strong>以上搭建本地环境完成</strong></p><h2 id="本地-Hexo-的安装和测试"><a href="#本地-Hexo-的安装和测试" class="headerlink" title="本地 Hexo 的安装和测试"></a>本地 Hexo 的安装和测试</h2><h3 id="1-新建博客文件夹：这里就取名为-blog"><a href="#1-新建博客文件夹：这里就取名为-blog" class="headerlink" title="1.新建博客文件夹：这里就取名为 blog"></a>1.新建博客文件夹：这里就取名为 blog</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure></code></pre><h3 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2.安装 Hexo"></a>2.安装 Hexo</h3><ul><li><p>先进入到 blog 目录    </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure></li><li><p>安装 Hexo</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>初始话 Hexo</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>启动测试 Hexo 是否安装初始化成功</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>  启动之后，打开浏览器，在地址栏输入：<strong><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></strong>，你会看到 Hexo 的示例页面 Hexo</p></li></ul><h2 id="把云服务器上的关于-Hexo-博客的文件夹整个拷贝到本地"><a href="#把云服务器上的关于-Hexo-博客的文件夹整个拷贝到本地" class="headerlink" title="把云服务器上的关于 Hexo 博客的文件夹整个拷贝到本地"></a>把云服务器上的关于 Hexo 博客的文件夹整个拷贝到本地</h2><h4 id="把云服务器上原本的-Hexo-博客文件夹拷贝下来"><a href="#把云服务器上原本的-Hexo-博客文件夹拷贝下来" class="headerlink" title="把云服务器上原本的 Hexo 博客文件夹拷贝下来"></a>把云服务器上原本的 Hexo 博客文件夹拷贝下来</h4><ul><li><em>注：博主用的与云服务器终端连接的工具为 Xshell，传输文件的为 Xftp</em></li><li>找到云服务器的文件夹，然后传输下来，如下图：<div align="center"><br>  <img width="580" height="380" src="https://note.youdao.com/yws/api/personal/file/77433CA7D22C46EAAA2BAB6D9C3925C0?method=download&shareKey=740e4ff1c2a51354761305d3ea65c781"><br>  </div></li></ul><h4 id="等到该文件夹下载完毕把该文件夹下所有的文件拷贝替代原本本地博客-blog-下的所有文件"><a href="#等到该文件夹下载完毕把该文件夹下所有的文件拷贝替代原本本地博客-blog-下的所有文件" class="headerlink" title="等到该文件夹下载完毕把该文件夹下所有的文件拷贝替代原本本地博客 blog 下的所有文件"></a>等到该文件夹下载完毕把该文件夹下所有的文件拷贝替代原本本地博客 blog 下的所有文件</h4><ul><li><p>现在在 Git Bash 上输入：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 清除缓存</span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>然后再如上启动 Hexo，并且打开浏览器，在地址栏输入：<strong><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></strong>看是否为你的云服务器上的 Hexo</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ul><h2 id="部署-Windows-本地的-Hexo-博客到-GitHub-上"><a href="#部署-Windows-本地的-Hexo-博客到-GitHub-上" class="headerlink" title="部署 Windows 本地的 Hexo 博客到 GitHub 上"></a>部署 Windows 本地的 Hexo 博客到 GitHub 上</h2><ul><li><p>编辑配置文件，关联远程仓库。在编辑器中打开 Hexo 配置文件_config.yml，找到下面内容：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure></li><li><p>添加 github 仓库信息：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Missyanc/Missyanc.github.io.git #github仓库地址</span><br><span class="line">  branch: master # github分支</span><br></pre></td></tr></table></figure><blockquote><p>把其中<strong>repo</strong>字段的值替换成你的<strong>github pages</strong>提交代码的 git 地址</p></blockquote><blockquote><p>别告诉我你不知道你的 github pages 的 git 提交地址。就是你刚刚创建那个github pages仓库的地址</p></blockquote><blockquote><p>注意：type、repo、branch 的前面有两个空格，后面的: 后面有一个空格</p></blockquote></li><li><p>安装 git 插件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>如果没有安装 git 插件，会有错误提示，安装后重新部署就可以了</p></blockquote></li><li><p>部署</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>  <strong>如果没有意外，部署就成功了，可以打开 https://你的用户名.github.io 查看</strong></p></li></ul><hr><h3 id="ps-emsp-hexo-命令缩写"><a href="#ps-emsp-hexo-命令缩写" class="headerlink" title="ps.&emsp;hexo 命令缩写"></a><strong>ps.&emsp;hexo 命令缩写</strong></h3><ul><li><blockquote><p>hexo g：hexo generate</p></blockquote></li><li><blockquote><p>hexo c：hexo clean</p></blockquote></li><li><blockquote><p>hexo s：hexo server</p></blockquote></li><li><blockquote><p>hexo d：hexo deploy</p></blockquote></li></ul><hr><h3 id="耶，大功告成！"><a href="#耶，大功告成！" class="headerlink" title="耶，大功告成！"></a><strong>耶，大功告成！</strong></h3><h3 id="接下来就是搞我的-Hexo-配置啦"><a href="#接下来就是搞我的-Hexo-配置啦" class="headerlink" title="接下来就是搞我的 Hexo 配置啦"></a><strong>接下来就是搞我的 Hexo 配置啦</strong></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于-Hexo-如何从云服务器转到-GitHub-Pages-Windows-本地部署&quot;&gt;&lt;a href=&quot;#关于-Hexo-如何从云服务器转到-GitHub-Pages-Windows-本地部署&quot; class=&quot;headerlink&quot; title=&quot;关于 Hexo 如何从云服务器转到 GitHub Pages+Windows 本地部署&quot;&gt;&lt;/a&gt;关于 Hexo 如何从云服务器转到 GitHub Pages+Windows 本地部署&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后来考虑到我的云服务器的优惠就是两年，博主现在大一，等以后大学毕业了阿里云的云服务器也不会再是9.9元/月了，而是一千多大洋，所以到时候买不买还是一个问题，于是在花了很多天捣鼓好了云服务器的配置之后毅然决然的抛弃了他转而用 GitHub Pages 部署我的 Hexo博客，毕竟想一直用下去嘛~&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;先总体说一下我的大概的步骤吧&quot;&gt;&lt;a href=&quot;#先总体说一下我的大概的步骤吧&quot; class=&quot;headerlink&quot; title=&quot;先总体说一下我的大概的步骤吧&quot;&gt;&lt;/a&gt;先总体说一下我的大概的步骤吧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先当然是搭建好本地环境&lt;/li&gt;
&lt;li&gt;完成本地 Hexo 的安装和测试&lt;/li&gt;
&lt;li&gt;把云服务器上的关于 Hexo 博客的文件夹整个拷贝到本地并且替代本地的 Hexo 文件夹&lt;/li&gt;
&lt;li&gt;部署 Windows 本地的 Hexo 博客到 GitHub 上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;这样做下来弄好之后，新的博客一点没变，所有配置依旧玩好无缺，所有博文也是丝毫不差&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://missyanc.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://missyanc.github.io/tags/Hexo/"/>
    
      <category term="技术学习" scheme="https://missyanc.github.io/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="云服务器" scheme="https://missyanc.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://missyanc.github.io/2018/09/12/hello-world/"/>
    <id>https://missyanc.github.io/2018/09/12/hello-world/</id>
    <published>2018-09-12T08:02:46.703Z</published>
    <updated>2018-09-13T12:48:25.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准开头"><a href="#标准开头" class="headerlink" title="标准开头"></a>标准开头</h1><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标准开头&quot;&gt;&lt;a href=&quot;#标准开头&quot; class=&quot;headerlink&quot; title=&quot;标准开头&quot;&gt;&lt;/a&gt;标准开头&lt;/h1&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阿里云服务器添加安全组规则</title>
    <link href="https://missyanc.github.io/2018/09/11/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8%E7%BB%84%E8%A7%84%E5%88%99/"/>
    <id>https://missyanc.github.io/2018/09/11/阿里云服务器添加安全组规则/</id>
    <published>2018-09-11T15:38:56.000Z</published>
    <updated>2018-09-24T05:49:02.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云服务器添加安全组规则"><a href="#阿里云服务器添加安全组规则" class="headerlink" title="阿里云服务器添加安全组规则"></a>阿里云服务器添加安全组规则</h1><p>——by yanc</p><blockquote><p>先登录你的阿里云并且进入到管理控制台</p></blockquote><h4 id="找到安全组，点击进入，具体操作如下图："><a href="#找到安全组，点击进入，具体操作如下图：" class="headerlink" title="找到安全组，点击进入，具体操作如下图："></a>找到安全组，点击进入，具体操作如下图：</h4><div align="center"><br><img width="350" height="550" src="https://note.youdao.com/yws/api/personal/file/7CBD64BD2E6F4DFD93B9514622BE8CE4?method=download&shareKey=349745365b6fea1bb961829e73393fb8"><br></div><a id="more"></a><h4 id="进入安全组之后，点击配置规则，具体操作如下图："><a href="#进入安全组之后，点击配置规则，具体操作如下图：" class="headerlink" title="进入安全组之后，点击配置规则，具体操作如下图："></a>进入安全组之后，点击配置规则，具体操作如下图：</h4><div align="center"><br><img width="650" height="200" src="https://note.youdao.com/yws/api/personal/file/B5AEA771CE4A47B8A8E8E1305B4FC7ED?method=download&shareKey=6856cc2afb46616829a8ffd4c8682329"><br></div><h4 id="开始配置规则，如下图所示："><a href="#开始配置规则，如下图所示：" class="headerlink" title="开始配置规则，如下图所示："></a>开始配置规则，如下图所示：</h4><div align="center"><br><img width="380" height="410" src="https://note.youdao.com/yws/api/personal/file/3ADDD40760F0462CBED8095C6D1262A5?method=download&shareKey=3fea3840140d5092732c1d2e849a0304"><br></div><p><strong>点击确定，添加安全组规则完成</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;阿里云服务器添加安全组规则&quot;&gt;&lt;a href=&quot;#阿里云服务器添加安全组规则&quot; class=&quot;headerlink&quot; title=&quot;阿里云服务器添加安全组规则&quot;&gt;&lt;/a&gt;阿里云服务器添加安全组规则&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先登录你的阿里云并且进入到管理控制台&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;找到安全组，点击进入，具体操作如下图：&quot;&gt;&lt;a href=&quot;#找到安全组，点击进入，具体操作如下图：&quot; class=&quot;headerlink&quot; title=&quot;找到安全组，点击进入，具体操作如下图：&quot;&gt;&lt;/a&gt;找到安全组，点击进入，具体操作如下图：&lt;/h4&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img width=&quot;350&quot; height=&quot;550&quot; src=&quot;https://note.youdao.com/yws/api/personal/file/7CBD64BD2E6F4DFD93B9514622BE8CE4?method=download&amp;shareKey=349745365b6fea1bb961829e73393fb8&quot;&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="云服务器" scheme="https://missyanc.github.io/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="技术学习" scheme="https://missyanc.github.io/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="云服务器" scheme="https://missyanc.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器配置Hexo最详细教程</title>
    <link href="https://missyanc.github.io/2018/09/11/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEHexo%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <id>https://missyanc.github.io/2018/09/11/阿里云服务器配置Hexo最详细教程/</id>
    <published>2018-09-11T13:04:02.000Z</published>
    <updated>2018-09-24T05:49:13.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录自己的整个-Hexo-安装"><a href="#记录自己的整个-Hexo-安装" class="headerlink" title="记录自己的整个 Hexo 安装"></a>记录自己的整个 Hexo 安装</h1><p>——by yanc</p><blockquote><p><strong>写在前面，本人用的是阿里的云服务器与 Hexo 搭建的个人博客，可以与 git 网站关联，代码可以实时上传在 git 上，云服务器是基于 Linux 系统的，如果只是单纯的想部署到云服务器上可以忽略以下的 git 相关部分，以后再试着整个全部部署在 git bash 上</strong></p></blockquote><p>这整个过程我花了好几天摸索搞好，现在写下来记录</p><p><strong><code>做这个博客本人的初衷是记录下和家人与所爱的人发生的事，以及自己学习的历程</code></strong></p><div align="center"><br><br><img width="650" height="750" src="https://note.youdao.com/yws/api/personal/file/9BF5C59847D54E0A82112259BB3561EF?method=download&shareKey=4813cb5b208ef6e037047b4b80317dc4"><br></div><a id="more"></a><hr><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ol><li>第一步我们先安装 Node.js ，我是选择的下载压缩包然后解压然后安装</li></ol><ul><li><ul><li>在官网下载压缩包：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.1.2/node-v8.1.2.tar.gz</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>解压缩：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf node-v8.1.2.tar.gz</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>安装 Node.js：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li>第二步就是安装 Hexo</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><p><strong>&emsp;&emsp;以上的步骤的目录的可以自选，但是最好在 root 目录下</strong></p><h2 id="二、创建我们的完整的博客目录"><a href="#二、创建我们的完整的博客目录" class="headerlink" title="二、创建我们的完整的博客目录"></a>二、创建我们的完整的博客目录</h2><ol><li><p>确保你的 Linux 云服务器上装好了 git，如果没有请装上 git ，git安装及相关操作教程请看<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的 git 教程</a></p></li><li><p>第一步是选择好目录，挑好了你的建博客的地址。我们先要建 git 本地仓库的目录并且初始化 git 本地仓库</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir git_blog</span><br></pre></td></tr></table></figure><ul><li>在该目录下初始化 git 本地仓库：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ol start="3"><li>在这个 git 本地仓库的目录下建好 Hexo 博客目录并且初始化</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir Hexo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;此时 root/git_blog 目录的文件目录结构如下：</p></blockquote><div align="center"><br><img width="400" height="260" src="https://note.youdao.com/yws/api/personal/file/8CCBA96D2EB54015AFC9481341A2C656?method=download&shareKey=a9a8626bcd0a548b272ffc7f5d5dd75c"><br></div><h2 id="三、测试我们的-Hexo-看能否正常打开"><a href="#三、测试我们的-Hexo-看能否正常打开" class="headerlink" title="三、测试我们的 Hexo 看能否正常打开"></a>三、测试我们的 Hexo 看能否正常打开</h2><ul><li><p>默认的端口号为4000，所以普通的系统我们只需要输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就好。</p></li><li><p>但是我们的是阿里云服务器，部署的是 Linux 系统，所以我们的测试用以下命令测试：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:4000</span><br></pre></td></tr></table></figure><ul><li>OK，输入上面的命令得到一堆东西，到这你的都应该和我一样没问题，当然目前用的是默认的 Hexo 主题 landscape</li><li>于是博主就开心的去了自己的 Windows 系统的 Chrome 浏览器下输入了博主自己的阿里云服务器私有ip + :4000（ip:4000）地址，结果无法访问</li><li>于是又开始了辛苦（想哭）的找问题过程</li><li>结果就是我解决啦，也明白了ip和端口号的关系！问题在于我的阿里云服务器安全组没有给4000这个端口放心，关于阿里云服务器怎么添加端口安全组请看这：<a href="https://missyanc.github.io/2018/09/11/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8%E7%BB%84%E8%A7%84%E5%88%99/">阿里云服务器添加安全组配置</a></li></ul><hr><p>ps.&emsp;博主连接阿里云服务器终端是用的 Xshell 工具</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录自己的整个-Hexo-安装&quot;&gt;&lt;a href=&quot;#记录自己的整个-Hexo-安装&quot; class=&quot;headerlink&quot; title=&quot;记录自己的整个 Hexo 安装&quot;&gt;&lt;/a&gt;记录自己的整个 Hexo 安装&lt;/h1&gt;&lt;p&gt;——by yanc&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面，本人用的是阿里的云服务器与 Hexo 搭建的个人博客，可以与 git 网站关联，代码可以实时上传在 git 上，云服务器是基于 Linux 系统的，如果只是单纯的想部署到云服务器上可以忽略以下的 git 相关部分，以后再试着整个全部部署在 git bash 上&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这整个过程我花了好几天摸索搞好，现在写下来记录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;做这个博客本人的初衷是记录下和家人与所爱的人发生的事，以及自己学习的历程&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;img width=&quot;650&quot; height=&quot;750&quot; src=&quot;https://note.youdao.com/yws/api/personal/file/9BF5C59847D54E0A82112259BB3561EF?method=download&amp;shareKey=4813cb5b208ef6e037047b4b80317dc4&quot;&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://missyanc.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://missyanc.github.io/tags/Hexo/"/>
    
      <category term="技术学习" scheme="https://missyanc.github.io/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="云服务器" scheme="https://missyanc.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>我爱的是言草右小姐</title>
    <link href="https://missyanc.github.io/2018/09/11/%E6%88%91%E7%88%B1%E7%9A%84%E8%A8%80%E8%8D%89%E5%8F%B3%E5%B0%8F%E5%A7%90/"/>
    <id>https://missyanc.github.io/2018/09/11/我爱的言草右小姐/</id>
    <published>2018-09-11T03:28:52.000Z</published>
    <updated>2018-09-14T03:46:22.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我爱的是言草右小姐，Missyanc"><a href="#我爱的是言草右小姐，Missyanc" class="headerlink" title="我爱的是言草右小姐，Missyanc"></a>我爱的是言草右小姐，Missyanc</h1><p>2018/9/12 言草右小姐送给我一块漂亮的手表，这是别人送我第一块表，言草右小姐说她想用这块手表换取我的时间，让我能和她一直玩。</p><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我爱的是言草右小姐，Missyanc&quot;&gt;&lt;a href=&quot;#我爱的是言草右小姐，Missyanc&quot; class=&quot;headerlink&quot; title=&quot;我爱的是言草右小姐，Missyanc&quot;&gt;&lt;/a&gt;我爱的是言草右小姐，Missyanc&lt;/h1&gt;&lt;p&gt;2018/9/12 言草右小姐送给我一块漂亮的手表，这是别人送我第一块表，言草右小姐说她想用这块手表换取我的时间，让我能和她一直玩。&lt;/p&gt;
    
    </summary>
    
      <category term="言小姐" scheme="https://missyanc.github.io/categories/%E8%A8%80%E5%B0%8F%E5%A7%90/"/>
    
    
      <category term="yanc" scheme="https://missyanc.github.io/tags/yanc/"/>
    
      <category term="myLove" scheme="https://missyanc.github.io/tags/myLove/"/>
    
  </entry>
  
</feed>
