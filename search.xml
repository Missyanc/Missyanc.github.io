<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[48.Rotate Image]]></title>
    <url>%2F2018%2F09%2F24%2FImage%2F</url>
    <content type="text"><![CDATA[48.Rotate Image——by yanc 问题描述You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). 您将获得表示图像的 n x n 2D 矩阵。将图像旋转 90 度（顺时针）。 NoteYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Example1：12345678910111213Given input matrix = [ [1,2,3], [4,5,6], [7,8,9]],rotate the input matrix in-place such that it becomes:[ [7,4,1], [8,5,2], [9,6,3]] Example2:123456789101112131415Given input matrix =[ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16]], rotate the input matrix in-place such that it becomes:[ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11]] 问题分析：问题是叫我们把一个二维矩阵顺时针旋转 90° ，可以用以下步骤 先从上到下反转 再交换对称性 123456clockwise rotatefirst reverse up to downthen swap the symmetry1 2 3 7 8 9 7 4 14 5 6 =&gt; 4 5 6 =&gt; 8 5 27 8 9 1 2 3 9 6 3 AC 源代码：123456789101112131415161718192021public void rotate(int[][] matrix)&#123; if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return; int rows = matrix.length; int cols = matrix[0].length; // reverse up to down for (int first = 0,last = rows - 1; first &lt; last;first++,last--)&#123; int[] temp = matrix[first]; matrix[first] = matrix[last]; matrix[last] = temp; &#125; // swap the symmetry for (int i = 0; i &lt; rows; i++)&#123; for (int j = i+1; j &lt; cols; j++)&#123; int temp = matrix[i][j]; matrix[i][j] = matrix[j][i]; matrix[j][i] = temp; &#125; &#125;&#125; 问题解决！Submit！ Accepted！]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[47.Permutations II]]></title>
    <url>%2F2018%2F09%2F24%2FII%2F</url>
    <content type="text"><![CDATA[47.Permutations II——by yanc 问题描述：Given a collection of numbers that might contain duplicates, return all possible unique permutations. 给定可能包含重复项的数字集合，返回所有可能的唯一排列。 Example：1234567Input: [1,1,2]Output:[ [1,1,2], [1,2,1], [2,1,1]] 问题分析： 这里我们先考虑一下，它与第二题唯一的不同在于：在 DFS 函数中，做循环遍历时，如果与当前元素相同的一个元素已经被取用过，则要跳过所有值相同的元素。 举个例子：对于序列 &lt;1,1,2,3&gt;。在 DFS 首遍历时，1 作为首元素被加到 list 中，并进行后续元素的添加；那么，当 DFS 跑完第一个分支，遍历到 1 (第二个) 时，这个 1 不再作为首元素添加到 list 中，因为 1 作为首元素的情况已经在第一个分支中考虑过了。 为了实现这一剪枝思路，有了如下的解题算法。 解题算法 先对给定的序列 nums 进行排序，使得大小相同的元素排在一起。 新建一个 used 数组，大小与 nums 相同，用来标记在本次 DFS 读取中，位置 i 的元素是否已经被添加到 list 中了。 根据思路可知，我们选择跳过一个数，当且仅当这个数与前一个数相等，并且前一个数未被添加到 list 中。根据以上算法，对题二的代码略做修改，可以得到如下的 AC 代码。(在处理一般性问题时，建议用此算法，毕竟 Permutation 只是特殊情况) AC 源代码：123456789101112131415161718192021222324252627282930313233343536/** * 给定可能包含重复项的数字集合，返回所有可能的唯一排列 * @param nums 给的数组 * @return 所有排列可能 */ public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123; List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;(); Arrays.sort(nums); backtrack(list,new ArrayList&lt;&gt;(),nums,new boolean[nums.length]); return list; &#125; /** * 回溯得到所有的排列 * @param list 最后的那个排列 * @param tempList 临时的某个排列 * @param nums 输入的整数数组 * @param used 判断数组中的整数是否加入到了 list 中 */ private void backtrack(List&lt;List&lt;Integer&gt;&gt; list,List&lt;Integer&gt; tempList,int[] nums,boolean[] used)&#123; if (tempList.size() == nums.length)&#123; list.add(new ArrayList&lt;&gt;(tempList)); &#125;else &#123; for (int i=0; i &lt; nums.length; i++)&#123; // 当前位置的数已经在List中了 if(used[i]) continue; // 当前元素与其前一个元素值相同 且 前元素未被加到list中，跳过该元素 if (i&gt;0 &amp;&amp; nums[i] == nums[i-1] &amp;&amp; !used[i-1]) continue; used[i] = true; tempList.add(nums[i]); backtrack(list,tempList,nums,used); used[i] = false; tempList.remove(tempList.size() - 1); &#125; &#125; &#125; 问题解决！Submit！ Accepted！]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[46.Permutations]]></title>
    <url>%2F2018%2F09%2F24%2F46-Permutations%2F</url>
    <content type="text"><![CDATA[46.Permutations——by yanc 问题描述：Given a collection of distinct integers, return all possible permutations. 给定一组不同的整数，返回所有可能的排列。 Example：12345678910Input: [1,2,3]Output:[ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]] 问题分析：将采用回溯法解决这个问题。 回溯是啥用爬山来比喻回溯，好比从山脚下找一条爬上山顶的路, 起初有好几条道可走, 当选择一条道走到某处时, 又有几条岔道可供选择, 只能选择其中一条道往前走, 若能这样子顺利爬上山顶则罢了, 否则走到一条绝路上时, 只好返回到最近的一个路口, 重新选择另一条没走过的道往前走。如果该路口的所有路都走不通, 只得从该路口继续回返。照此规则走下去, 要么找到一条到达山顶的路, 要么最终试过所有可能的道, 无法到达山顶 回溯是一种穷举，但与 brute force 有一些区别，回溯带了两点脑子的，并不多，brute force 一点也没带 第一点脑子是回溯知道回头；相反如果是 brute force, 发现走不通立刻跳下山摔死，换第二条命从头换一条路走 第二点脑子是回溯知道剪枝；如果有一条岔路上放了一坨屎，那这条路我们不走，就可以少走很多不必要走的路 还有一些爱混淆的概念：递归，回溯，DFS 回溯是一种找路方法，搜索的时候走不通就回头换路接着走，直到走通了或者发现此山根本不通 DFS 是一种开路策略，就是一条道先走到头，再往回走一步换一条路走到头，这也是回溯用到的策略。在树和图上回溯时人们叫它 DFS 递归是一种行为，回溯和递归如出一辙，都是一言不合就回到来时的路，所以一般回溯用递归实现；当然也可以不用，用栈 此题解释：对于此题我们的路就是要得到所有的排列，那我们就得把所有的路走一遍 退出这一个岔路就是递归的出口，当 tempList.size() == nums.length时回头 剪枝即为 if (tempList.contains(nums[i])) continue; 每次进入递归都是一个完整的 for 循环 AC 源代码：123456789101112131415161718192021222324252627282930/** * 解决给定一个数组，返回所有可能的排列 * @param nums 给的数组 * @return 所有排列可能 */public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123; List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;(); // Arrays.sort(nums); // not necessary backtrack(list,new ArrayList&lt;&gt;(),nums); return list;&#125;/** * 回溯得到所有的排列 * @param list 最后的那个排列 * @param tempList 临时的某个排列 * @param nums 输入的整数数组 */private void backtrack(List&lt;List&lt;Integer&gt;&gt; list,List&lt;Integer&gt; tempList,int[] nums)&#123; if (tempList.size() == nums.length)&#123; list.add(new ArrayList&lt;&gt;(tempList)); &#125;else &#123; for (int i=0; i &lt; nums.length; i++)&#123; if (tempList.contains(nums[i])) continue; // element already exists, skip tempList.add(nums[i]); backtrack(list,tempList,nums); tempList.remove(tempList.size() - 1); &#125; &#125;&#125; 问题解决！Submit！ Accepted！]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux-2018/9/20]]></title>
    <url>%2F2018%2F09%2F20%2FLinux-2018-9-20%2F</url>
    <content type="text"><![CDATA[2018/9/20——by yanc Ch. Screen Programing上节课的屏幕编程游戏继续对于下面这个个游戏编程而言： 123456789101112131415161718192021222324252627282930313233/* hello2.c * purpose : show how to use curses functions with a loop * outline initialize, draw stuff, wrap up * */#include &lt;stdio.h&gt;#include &lt;curses.h&gt;main()&#123; int i; initscr(); clear(); for(i=0;i&lt;LINES;i++)&#123; clear(); move(i,i+1); if(i%2 == 1) standout(); addstr("Hello world!"); if(i%2 == 1) standend(); refresh(); sleep(1); /* * clear(); * if clear() is here, then there are nothing print when loop end. * if clear() is before as now, it will clear the screen first, * and then print, and when loop end, it can also print again in shell. */ &#125; getch(); endwin();&#125; refresh 代价是很大的，一般是覆盖 于是需要改进，大概过程是 先打印 “helloworld_” 注意此时光标位置 再吧光标移回去 “_helloworld” 再打印与上一样多的 “ ” 覆盖 该游戏下一个版本 + 人机交互 给移动加上边界 usleep $10^-6s$ 微秒 interval timer（itimer）：间隔计时器，时钟编程why sleep can stop? And when a process is sleeping ,can we use other process?? 时间到这是一个信号：SIGALRM，时钟信号？？ alarm(5) pause() 用于将调用进程挂起直至捕捉到信号为止。这个函数很常用，通常可以用于判断信号是否已到 如下实现了和 sleep(5) 一样的功能1234567891011121314#include&lt;stdio.h&gt;#include&lt;signal.h&gt;void wakeup(int sum)&#123;&#125;main()&#123; signal(SIGALRM,wakeup); // 忽略 SIGALRM 信号并且当收到该信号是执行 wakeup 函数 printf("Sleep 5 second!\n"); //sleep(5); alarm(5); pause(); printf("Wake up!\n");&#125; signal() 函数详解： signal() 函数的使用12#include &lt;signal.h&gt; void (*signal(int signum, void (*handler))(int)))(int); 如果该函数原型不容易理解的话，可以参考下面的分解方式来理解：12typedef void (*sighandler_t)(int)； sighandler_t signal(int signum, sighandler_t handler)); 第一个参数指定信号的值，第二个参数指定针对前面信号值的处理，可以忽略该信号（参数设为 SIG_IGN）；可以采用系统默认方式处理信号 (参数设为 SIG_DFL )；也可以自己实现处理方式 (参数指定一个函数地址)。 如果 signal() 调用成功，返回最后一次为安装信号 signum 而调用 signal() 时的 handler 值；失败则返回 SIG_ERR 2. signal() 函数的机制 让我试着简单说一下，现在一个 Linux 的用户进程跑了起来，我们突然按键或者调用 pause() 函数等等进行中断或者进行系统调用，此时用户程序就会进入内核，准确的来说是陷入内核，于是在内核进行具体的内核服务，服务完了之后准备返回给用户进程，让用户进程继续执行。 对于 signal 函数，进程控制块中设计了一个 signal 的位图信息，其中的每位与具体的 signal 相对应，这与中断机制是保持一致的 system call 返回。用户进程由于调用了 system call 后，从内核返回用户态时需要检查他拥有的 signal 位图信息表，此时是一个执行点 中断返回。进程被系统中断打断之后，系统将 CPU 交给进程时，需要检查即将执行进程所拥有的 signal 位图信息表，此时也是一个执行点 综上所述（小声bb） ： 简单说来就是当用户进程运行到 signal 函数时，把相关他的信息保存在 PCB 上，且定义为一个 signal位图，当内核返回用户程序时就会检查整这个位图，于是就发现 signal 函数啦，然后就执行 signal 函数，signal 就捕捉到了信号，那么进程从内核态返回用户态时执行用户定义的函数 查资料发现：Signal 机制实现的比较灵活，用户进程由于中断或者 system call 陷入内核之后，将断点信息都保存到了堆栈中，在内核返回用户态时，如果存在被触发的 signal，那么直接将待执行的 signal 处理函数 push 到堆栈中，在 CPU 切换到用户模式之后，直接 pop 堆栈就可以执行 signal 处理函数并且返回到用户进程了。Signal 处理函数应用了进程上下文，并且应用实际的中断模拟了进程的软中断过程 setitimer函数：系统里面会为你提供三个间隔计时器 Real ： 这是真实的时间，过去一秒就是一秒 Virtual ： 这貌似是对应用户代码的时间 Prof ： 用户代码和内核代码加起来的时间为 Prof 怎么使用呢，需要设置两个时间： it_value ： 开始时间 双精度 s,us，确保能够取到不同精度的时间 it_interval ： 间隔时间 在 Linux 中有一个结构体 itimerval 存放 it_value 与 it_interval 而 it_value 与 it_interval 也是一个结构体 Linux 中源代码如下： 123456789struct itimerval &#123; struct timeval it_interval; /* next value */ struct timeval it_value; /* current value */&#125;;struct timeval &#123; time_t tv_sec; /* seconds */ suseconds_t tv_usec; /* microseconds */&#125;; 那究竟这个咋就厉害了？请看下列例子： 12345678910111213141516171819202122232425262728293031323334/* itimertest.c */#include &lt;stdio.h&gt;#include &lt;signal.h&gt;#include &lt;sys/time.h&gt;void wakeup(int signum)&#123; printf("Wake up!\n");&#125;main()&#123; struct itimerval itv; signal(SIGALRM, wakeup); itv.it_interval.tv_sec=1; itv.it_interval.tv_usec=500000; itv.it_value.tv_sec=5; itv.it_value.tv_usec=0; //setitimer 将触发 SIGALRM 信号 setitimer(ITIMER_REAL, &amp;itv, NULL); while(1)&#123; printf("About to sleep!\n"); pause(); &#125;&#125;/* 让我来试着解释一下这个程序时怎么工作的，结合上面的 signal 函数详解 * 程序一行一行的运行，到了 signal(SIGALRM, wakeup); 程序在 PCB 中生成一个处理 SIGALRM 的位图可以捕捉该信号 * 到了 setitimer(ITIMER_REAL, &amp;itv, NULL); 行 ，生成一个定时器，参数讲解看后面 * 然后此时不管程序之后什么样，程序都会在我设定的 5s 后收到一个 SIGALRM 信号 * 收到之后，程序就会交给 signal 函数处理该信号 * 可以试着注释 signal(SIGALRM, wakeup); 和 setitimer(ITIMER_REAL, &amp;itv, NULL); 和 pause(); 看看效果帮助理解 */ setitimer 函数详解：现在的系统中很多程序不再使用 alarm 调用，而是使用 setitimer 调用来设置定时器，用 getitimer 来得到定时器的状态， 这两个调用的声明格式如下： 1234#include &lt;sys/time.h&gt;int getitimer(int which, struct itimerval *curr_value); int setitimer(int which, const struct itimerval *new_value,struct itimerval *old_value); 参数: 第一个参数 which 指定定时器类型 第二个参数是结构 itimerval 的一个实例，结构 itimerval 形式 第三个参数可不做处理 返回值: 成功返回 0 失败返回 - 1 基本机制：该系统调用给进程提供了三个定时器，它们各自有其独有的计时域，当其中任何一个到达，就发送一个相应的信号给进程，并使得计时器重新开始。 三个计时器由参数 which 指定，如下所示： TIMER_REAL：按实际时间计时，计时到达将给进程发送 SIGALRM 信号。 ITIMER_VIRTUAL：仅当进程执行时才进行计时。计时到达将发送 SIGVTALRM 信号给进程。 ITIMER_PROF：当进程执行时和系统为该进程执行动作时都计时。与 ITIMER_VIR-TUAL 是一对，该定时器经常用来统计进程在用户态和内核态花费的时间。计时到达将发送 SIGPROF 信号给进程 定时器中的参数 value 用来指明定时器的时间，其结构如下： 123456789101112struct itimerval &#123; struct timeval it_interval; /*第一次之后每隔多长时间 */ struct timeval it_value; /* 第一次调用要多长时间 */&#125;;//该结构中 timeval 结构定义如下：struct timeval &#123; long tv_sec; /* 秒 */ long tv_usec; /* 微秒，1 秒 = 1000000 微秒 */&#125;; 在 setitimer 调用中，参数 ovalue 如果不为空，则其中保留的是上次调用设定的值。定时器将 it_value 递减到 0 时，产生一个信号，并将 it_value 的值设定为 it_interval 的值，然后重新开始计时，如此往复。当 it_value 设定为 0 时，计时器停止，或者当它计时到期，而 it_interval 为 0 时停止。调用成功时，返回 0；错误时，返回 - 1，并设置相应的错误代码 errno： EFAULT：参数 value 或 ovalue 是无效的指针。 EINVAL：参数 which 不是 ITIMER_REAL、ITIMER_VIRT 或 ITIMER_PROF 中的一个 ITIMER_REAL 相当于一个软中断 如何实现一个弹球关闭规则模式： crmode() noecho() 现在能够一维的移动球 但是我们希望这个球能够在二维中移动 Ch.Process如何查看系统上的进程123456789psps -lsort &amp; // 可以在后台执行nice -n 5 sort &amp; // 加上指定的优先数renice n PID // 给某 PID 的进程加上 n 的优先数 ps -e // 查看所有的进程状态，包括后台和其他用户ps aux ps -l 得到的进程属性： S 代表这个程序的状态 PPID : Parent PID PRI : 优先级，值越小，优先级越高，一般不好调整，但是可以通过优先数调整，只能增加优先级，唯有超级用户可以提高优先级 SZ : 进程占用内存大小 TTY：终端 WCHAN：目前这个程序是否正在运作当中，若为 - 表示正在运作 进程的生与死 单体无性繁殖 如何在一个进程里面执行一个别的进程？？ execlp(CMD,ARG!1…); 还有 execvp(CMD,); 123456789/* exectest.c */#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;main()&#123; printf("About to execute ls /\n"); execlp("ls","ls","/",NULL); printf("Done!\n");&#125; 可是当我们运行了 exectest.c 之后发现，Done！ 并没有打印出来！ 问题来了：Done! 咋就不见了呢 其实 exec 函数族相当于换脑，把下面的代码的换了 fork()所以现在而言直接这样执行是不能这样执行的！我们不能直接换脑，所以我们可以生成一个子进程给他换脑 By fork 那我们该怎么办呢？？ 于是：fork 出现了！看如下代码： 1234567891011121314/* forktest.c */#include &lt;stdio.h&gt;main()&#123; printf("About to fork.\n"); fork(); // fork 可以创建一个子进程 printf("After fork.\n");&#125;/* Output: * About to fork. * After fork. * After fork. */ 发现问题：为什么会有两个 After fork 呢？？于是我们想知道他们来自哪里： 123456789101112131415/* forktest2.c */#include &lt;stdio.h&gt;main()&#123; printf("I am %d. About to fork:\n", getpid()); fork(); // 可以 sleep(30) 然后去 ps 找这两个进程的 PID 验证，且 ./a.out &amp; 是后台执行 printf("After fork. I am %d.\n", getpid());&#125;/* Output: * I am 45072. About to fork: * After fork. I am 45072. * After fork. I am 45073. */ 那这究竟是为什么呢？为什么子进程也能打印 After fork！？ 原来fork() 会完全复制一个父进程，包括代码状态和数据，状态就是此时代码运行到哪的状态，这个也不会变 父进程和子进程 fork 后是完全独立的，相互竞争计算机的资源 一个小问题，看以下代码：123456789/* forktest3.c */#include &lt;stdio.h&gt;main()&#123; printf("I am %d. About to fork:\n", getpid()); fork(); fork(); fork(); printf("After fork. I am %d.\n", getpid());&#125; 请问一共有多少个 After fork！呢？ 3 个 fork 是 8 个进程 但是又问题来了，我们怎么知道谁是子进程谁是父进程？？ 通过 fork 的返回值 如果成功创建一个子进程，对于父进程来说返回子进程 ID 如果成功创建一个子进程，对于子进程来说返回值为 0 如果为 - 1 表示创建失败 看下面代码：12345678910111213141516171819/* forktest4.c */#include &lt;stdio.h&gt;main()&#123; int rv; printf("I am %d. About to fork:\n", getpid()); rv=fork(); if(0==rv)&#123; printf("I am child. I am %d\n", getpid()); &#125;else&#123; printf("I am father. My child is %d\n", rv); &#125;&#125;/* Output: * I am 45450. About to fork: * I am father. My child is 45451 * I am child. I am 45451 */ 仔细一看上述程序就会发现一个问题，那就是父进程在子进程之前结束。 那么我们怎么实现父子进程的协调呢？？？比如要等子进程执行完父进程再继续，就像父进程正在 cook ，然而没有酱油了等子进程去买酱油之后回来才能继续 cook？ wait() 函数完美的解决了我们的问题，请看如下代码： 12345678910111213141516171819202122/* forktest5.c */#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;main()&#123; int rv, rv_wait; printf("About to execute ls /:\n"); rv=fork(); if(0==rv)&#123; execlp("ls","ls","/", NULL); &#125;else&#123; rv_wait=wait(NULL); printf("%d is back. Done\n", rv_wait); &#125;&#125;/* Output ： * About to execute ls /: * bin dev home lib64 mnt proc run srv tmp var * boot etc lib media opt root sbin sys usr * 46949 is back. Done */ 进程一旦调用了 wait，就立即阻塞自己，由 wait 自动分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成僵尸的子进程，wait 就会收集这个子进程的信息， 并把它彻底销毁后返回；如果没有找到这样一个子进程，wait 就会一直阻塞在这里，直到有一个出现为止 wait() 函数详解 表头文件 #include&lt;sys/types.h&gt; #include&lt;sys/wait.h&gt; 定义函数 pid_t wait (int * status); 函数说明 wait() 会暂时停止目前进程的执行，直到有信号来到或子进程结束。如果在调用 wait（）时子进程已经结束，则 wait（）会立即返回子进程结束状态值。子进程的结束状态值会由参数 status 返回，而子进程的进程识别码也会一快返回。如果不在意结束状态值，则参数 status 可以设成 NULL。子进程的结束状态值请参考 waitpid（） 返回值 如果执行成功则返回子进程识别码（PID），如果有错误发生则返回 - 1。失败原因存于 errno 中 此时有一个有趣的现象，请看下面的代码： 12345678910111213141516171819/* forktest6.c */#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;main()&#123; int rv, rv_wait; printf("About to cook:\n"); rv=fork(); if(0==rv)&#123; int i; for(i=0;i&lt;50;i++)&#123; printf("Go shopping\n"); sleep(1); &#125; &#125;else&#123; rv_wait=wait(NULL); printf("%d is back. Done\n", rv_wait); &#125;&#125; 代码中我们用了 sleep() 函数让子进程一直睡着，然后我们此时在另外一个终端用超级权限 kill 子进程看一看会发生什么？ 发现子进程被 kill 之后依旧和 forktest5.c 一样返回了 46949 is back. Done ，就好比子进程去买酱油，但是路上摔死了，父进程还说酱油买到了，这就未免有些奇怪。那我们该怎么办呢？ 我们可以用 wait() 函数的返回值实现： 前面说过 wait 函数的参数 status 用来保存被收集进程退出时的一些状态，它是一个指向 int 类型的指针。 如果参数 status 的值不是 NULL，wait 就会把子进程退出时的状态取出并存入其中，这是一个整数值（int），指出了子进程是正常退出还是被非正常结束的（一个进程也可以被其他进程用信号结束，我们将在以后的文章中介绍），以及正常结束时的返回值，或被哪一个信号结束的等信息。由于这些信息被存放在一个整数的不同二进制位中，所以用常规的方法读取会非常麻烦，人们就设计了一套专门的宏（macro）来完成这项工作，以后会学习这个宏的吧 status 是 16 bit的数 0 - 7 ： exit value (0 - 255) 8 : core dump 9 - 16 : signal 于是我们有了下面的代码： 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main()&#123; int rv, rv_wait; printf("About to cook:\n"); rv=fork(); if(0==rv)&#123; int i; for(i=0;i&lt;50;i++)&#123; printf("Go shopping\n"); sleep(1); &#125; return 10; &#125;else&#123; int status; rv_wait=wait(&amp;status); printf("%d is back. status: %0x\n", rv_wait, status); // 按 16 进制打印 status &#125; return 0;&#125;/* About to cook: * Go shopping * Go shopping * ... * 47711 is back. status: a00 */ 为什么是 a00 呢？因为我们指定了 return 10; 且 status 是一个 16 位的数，所以 16 进制得 a00 Linux 在终端敲命令其实是 shell 的一个 fork 僵尸进程1 号进程为 init 进程，是所有进程的父进程，如果我们杀了 cook （父）进程，那么 shopping 进程则会吧 init 进程作为父进程，此时被杀了父进程的 shopping 进程也叫孤儿进程 Zombie 进程：僵尸进程(defunct)，是因为程序没有调用 wait() 进程回收 SIGCHLD 为忽略僵尸进程 看以下代码： 1234567891011121314151617181920/* forktest8.c */#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;signal.h&gt;int main()&#123; int rv, rv_wait; printf("About to cook:\n"); rv=fork(); if(0==rv)&#123; int i; return 10; &#125;else&#123; signal(SIGCHLD, SIG_IGN); // 忽略 SIGCHID 信号 while(1)&#123; sleep(1); &#125; &#125; return 0;&#125; 试着注释 signal(SIGCHLD, SIG_IGN); // 忽略 SIGCHID 信号 这一行，然后运行再 ^c 中断再 ps -el 看进程就会发现有一个 Z 标志僵尸进程。 总结一下：下面就让我用一些形象的比喻，来对进程短暂的一生作一个小小的总结： 随着一句 fork，一个新进程呱呱落地，但它这时只是老进程的一个克隆。 然后随着 exec，新进程脱胎换骨，离家独立，开始了为人民服务的职业生涯。 人有生老病死，进程也一样，它可以是自然死亡，即运行到 main 函数的最后一个 “}”，从容地离我们而去；也可以是自杀，自杀有 2 种方式，一种是调用 exit 函数，一种是在 main 函数内使用 return，无论哪一种方式，它都可以留下遗书，放在返回值里保留下来；它还甚至能可被谋杀，被其它进程通过另外一些方式结束他的生命。 进程死掉以后，会留下一具僵尸，wait 和 waitpid 充当了殓尸工，把僵尸推去火化，使其最终归于无形。 这就是进程完整的一生。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R-first-chapter]]></title>
    <url>%2F2018%2F09%2F19%2FR-first-chapter%2F</url>
    <content type="text"><![CDATA[第一章 认识数据分析与 R 语言—— by yanc 数据分析数据分析是指用适当的统计分析方法对收集来的大量数据进行分析，提取有用信息和形成结论而对数据加以详细研究和概括总结的过程 数据分析的原则： 数据分析是为了验证假设的问题，必须提供必要的数据验证。即构建完分析模型后，需要利用测试数据验证模型正确性。 数据分析是为了发现更多问题，并找到深层次原因 不能为了做数据分析而分析。必须有明确的问题或目 数据分析的步骤 探索性数据分析 找到数据中隐含信息；探索规律性的可能的形式（探索方向和方式）；通常需要数据清洗和整合 模型选定分析 通过定量分析，提出一类或几类可能的模型；再进一步分析，确定一类适合的模型 推断分析 使用数理统计方法， 对所确定模型或估计的可靠程度和精度做出推断 传统数据分析过程 明确目标 搜集数据 加工整理 缺失值处理、数据分组、数据取值转换…… 选择方法 解释结果 “大数据”分析过程 数据采集 预处理 数据清洗等。 统计和分析 可以满足大多数常见的分析需求 数据挖掘 与统计分析不同，数据挖掘一般没有什么预先设定好的主题 R 语言简介 R是用于统计分析和绘图的编程语言和软件环境 R是 GNU 包，因此是自由软件。源码使用 C、Fortran 和 R 进行编写 R语言历史 R语言是S语言的一种方言 1976年，贝尔实验室的John Chambers 开发S语言，以替代昂贵的 SPSS 和 SAS 工具 1992年，新西兰奥克兰大学两位统计学教授 Ross Ihaka 和 Robert Gentleman 开发，Chambers 也是开发成员 R 的优势 统计学家发明的：全面的统计研究平台，提供格式各样的数据分析技术 开源：可以自己修改（包和函数）；免费 交互式数据分析 why？？？ 可以从多中数据源导入数据，存在 bug 新算法（新的包）会迅速在R中实现 轻量级，安装文件小（不超过100M） 兼容不同的OS R的劣势 统计学家发明的：语法和一般程序设计语言差别很大，学习曲线陡峭，对于程序员来说“奇怪的”术语 开源导致 package 的质量、版本兼容性等问题 内存管理、速度与效率问题 不能直接利用R开发应用程序 R 的获取和安装 R 可以在 CRAN（Comprehensive RArchive Network）http://cran.r-project.org 上免费下载。Linux、Mac OS X 和 Windows 都有相应编译好的二进制版本 R的使用 R是一种区分大小写的解释型语言 eg.shell R中的多数功能是由程序内置函数和用户自编函数提供的，一次交互式会话期间的所有数据对象都被保存在内存中。一些基本函数是默认直接可用的，而其他高级函数则包含于按需加载的程序包中 什么是解释性语言、脚本语言。一行一行的解释 R语句由函数和赋值构成。R使用 &lt;-，而不是传统的 = 作为赋值符号。注释由符号 # 开头 x = x + 1 与 x &lt;- x + 1，前者不科学 Windows 从开始菜单中启动R。Mac需要双击应用程序文件夹中的R图标。Linux 在终端命令提示符下敲入R并回车 一个例子： 1234567# Listing 1.1 - A Sample R sessionage &lt;- c(1,3,5,2,11,9,3,9,12,3)weight&lt;-c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)mean(weight) #均值sd(weight) #标准差cor(age,weight) #相关度plot(age,weight) #画图 R 获取帮助 R的内置帮助系统提供了当前已安装包中所有函数的细节、参考文献以及使用示例 help.start() 打开帮助文档首页 help(&quot;foo&quot;)或?foo 查看函数 foo 的帮助（引号可以省略） help.search(&quot;foo&quot;) 或 ??foo 以 foo为关键词搜索本地帮助文档 example(&quot;foo&quot;) 函数 foo 的使用示例（引号可以省略） RSiteSearch(&quot;foo&quot;) 以 foo 为关键词搜索在线文档和邮件列表存档 apropos(&quot;foo&quot;, mode=&quot;function&quot;) 列出名称中含有 foo 的所有可用函数 data() 列出当前已加载包中所含的所有可用示例数据集 vignette() 列出当前已安装包中所有可用的 vignette 文档(一般是 PDF 文章) vignette(&quot;foo&quot;) 为主题 foo 显示指定的 vignette 文档 工作空间（workspace） 工作空间就是当前R的工作环境，它储存着所有用户定义的对象（向量、矩阵、函数、数据框、列表。可以将当前工作空间保存到一个镜像中，并在下次启动R时自动载入它 当前的工作**目录（working directory）是 R 用来读取文件和保存结果的默认目录 输入和输出 输入：函数 source(&quot;filename&quot;) 可在当前会话中执行一个脚本 文本输出：函数 sink(&quot;filename&quot;) 将输出重定向到文件filename中 图形输出 包（package） 包是R函数、数据、预编译代码以一种定义完善的格式组成的集合。计算机上存储包的目录称为库（library）。 函数 library() 则可以显示库中有哪些包 目前有 2500 多个包可从 http://cran.rproject.org/web/packages下载。这些包提供了横跨各种领域的新功能，包括分析地理数据、处理蛋白质质谱，甚至是心理测验分析的功能 包的安装 执行 install.packages() 将显示一个 CRAN 镜像站点的列表，选择其中一个镜像站点之后，将看到所有可用包的列表，选择其中的一个包即可进行下载和安装 例如，可以用可以使用命令 install.packages(&quot;gclus&quot;) 来下载和安装 gclus 包（注意有引号）。 包的载入 要在R会话中使用包，需要用 library() 命令载入这个包 例如，要使用 gclus 包，执行命令 library(gclus) 即可（注意没有引号）]]></content>
      <categories>
        <category>R 语言</category>
      </categories>
      <tags>
        <tag>R 语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[49.Group Anagrams]]></title>
    <url>%2F2018%2F09%2F18%2FAnagrams%2F</url>
    <content type="text"><![CDATA[49. Group Anagrams——by yanc 问题描述：Given an array of strings, group anagrams together. Example：1234567Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],Output:[ [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;], [&quot;nat&quot;,&quot;tan&quot;], [&quot;bat&quot;]] Note： All inputs will be in lowercase. The order of your output does not matter. 问题分析：分析：Two strings are anagrams if and only if their sorted strings are equal. 用 Map 实现：维护一个 map ans : {String -&gt; List} ，每一个 Key 为一个排序好的 string，并且每一个 value 为从最初输入的字符串 Lis 里排序了且 equal to Key 的 List Java代码实现：1234567891011121314public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs)&#123; if (strs.length == 0) return new ArrayList(); Map&lt;String,List&gt; ans = new HashMap&lt;String, List&gt;(); for (String s: strs)&#123; char[] chars = s.toCharArray(); Arrays.sort(chars); // 把他们排序 String key = String.valueOf(chars); if (!ans.containsKey(key)) ans.put(key,new ArrayList()); ans.get(key).add(s); &#125; return new ArrayList(ans.values());//返回所有的 List&lt;String&gt; &#125; Ouch！Accepted！]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[50.pow(x,n)]]></title>
    <url>%2F2018%2F09%2F17%2F50-pow-xn%2F</url>
    <content type="text"><![CDATA[50.Pow(x,n)——by yanc 问题描述：Implement pow(x, n), which calculates x raised to the power n(x^n) Example 1:12Input: 2.00000, 10Output: 1024.00000 Example 2:12Input: 2.10000, 3Output: 9.26100 Example 3:123Input: 2.00000, -2Output: 0.25000Explanation: 2^-2 = 1/2^2 = 1/4 = 0.25 Note: -100.0 &lt; x &lt; 100.0 n is a 32-bit signed integer, within the range [−2^31, 2^31 − 1] 分析我的第一想法是用迭代，用一个变量 result 保存结果然后: 12345if (n &gt; 0) for (int i =0 ;i &lt; n;i++) result = result * x;else if (n &lt; 0) for (int i =0 ;i &lt; -n;i++) result = result * (1/x);else return result = 1; ok,看完发现没问题，submit！ Ouch！超时了，完蛋，明显不行。 换一个思路：递归 1234567double res = 0;if (n == 0) return 1;if (n &lt; 0)&#123; n = -n; x = 1 / x; &#125;return (n % 2 == 0) ? pow(x*x,n/2) : x * pow(x*x,n/2); ok，没问题，submit！ Ouch！说当输入是 (2,Integer.MIN_VALUE) 时返回了一个 Infinity ,查了查发现这是说无限。 emmmm 开始去查资料找原因，发现是代码第4行，-n 超过了值，java 中整型的数 最大为 2^31 - 1 而 -Integer.MIN_VALUE 恰好比 2^31 - 1 多 1，所以越界 于是终极 Accepted代码为： 12345678910public static double pow(double x,int n)&#123; double res = 0; if (n &lt; 0)&#123; n = -(n + 1); x = 1 / x; res = (n % 2 == 0) ? pow(x*x,n/2) : x * pow(x*x,n/2); return res * x; &#125;else return (n % 2 == 0) ? pow(x*x,n/2) : x * pow(x*x,n/2); &#125; ————————————-分界线：知识补充———————————— 问题解决，发现是自己的基础知识不够引起的，于是开始补习： Java 中的整型Java 中有四种整型数据，分别是 byte, short, int, long。 它们的区别表现在单个数据所占的字节数以及取值范围的不同。具体见下表: 类型 字节数 取值范围 byte 1 -128~127 short 2 -32768~32767 int 4 -2147483648~2147483647 long 8 -9223372036854775808~9223372036854775807 值得一提的是，在 Java中，没有无符号位的整型数据，即所有的整型数据都是可以表示正数和负数的 Java 中的进制和其他编程语言一样，Java 中常用的进制位二进制、八进制、十进制、十六进制。其实八进制也不是太经常使用 二进制二进制的表示只包含 0 和 1 两种符号。在 Java 中，二进制的表示格式为： 1int x = 0b10101010 即在二进制数前面加了 0b 八进制八进制的表示包含 0、1、2、3、4、5、6、7 这八种符号。在 Java 中，八进制的表示格式为： 1int x = 01010101010 即在八进制数前面加了 0. 显然这种表示方法很容易弄混，一定得小心对待 十进制十进制即为日常数字使用的进制，它的表示包含 0、1、2、3、4、5、6、7、8、9 这十种符号。十进制的表示不需要特别的格式，和平时使用的数字表示一样 十六进制十六进制的表示包含 0、1、2、3、4、5、6、7、8、9、a、b、c、d、e、f 这十六中符号。在 Java 中，十六进制的表示格式为： 1int x = 0x10101010 即在十六进制数前加 0x.在任何进制表示的数字后面加上符号 L 即表示该数字为 long 型。此外， 从 Java7 以后，表示二进制、八进制、十进制、十六进制数的时候，可以在数中添加下划线以方便阅读。经过尝试，发现在数的最前面和最后面添加下划线是会报错的，即下划线只能添加在数的中间，不能加在数字的两端 1234int a = 0b1010_1010int b = 01010_1010int c = 1010_1010int d = 0x1010_1010]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件需求分析与设计]]></title>
    <url>%2F2018%2F09%2F16%2F%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[一个项目的里程碑——by yanc 第一个里程碑：产品确定，合同的签订（就像是软件的生） 软件的设计模型 第二个里程碑：软件的上线 最后一个里程碑：软件下架，不再使用（软件的死） 本门课讲的就是从软件合同签订到软件的设计模型确定这一个过程 一个问题：软件的架构设计，这样的人才很少。在美国一个不成文的规定是：只有从事软件行业8年以上的人才有资格成为软件架构师 第一章 软件进程软件开发的本质，通过人类的干预是解决不了的 复杂性 一致性 可变性 不可见性 软件开发的偶然性因素，通过人工的干预是可以改善的 利益干系人 软件工程 模型/建模 利益干系人：Stakeholder（股票持有人） 客户 老板 开发人员 投资人 股东 用户 竞争对手 PM 家人 政府 软件过程 顺序 成果物 分配给具体的人 鉴定标准 软件开发模式（软件过程） 瀑布模型 敏捷开发 增量迭代模型 RVP 软件开发方法 面向对象方法 面向功能方法（结构化） 面向数据方法 面向过程方法 … 面向对象的第一个原则： OCP原则，开发封闭原则：代码是可增加的，不可修改的 也就是面向接口编程 面向对象和结构化方法的区别 分解方法 功能 对象 代码层次 开发方法 一个栗子：五子棋程序 结构化的分解： 开始 黑方先行 绘制棋盘 判断输赢 轮到白子 绘制棋盘 判断输赢 返回步骤2 输出结果 面向对象分解： main 棋子 移动 棋盘 绘制 规则系统：提取出来做一个配置文件 判断输赢 那么问题来了，我想做一个围棋系统，面向对象只需要换一个配置文件就行 那么问题又来了，我想做一个国际象棋，对于面向对象，把棋子抽象成基类，五子棋和国际象棋继承就好啦，那就是棋子的配置图片不一样就行。 —————————————-分界线，上课第一周—————————————]]></content>
      <categories>
        <category>软件课程</category>
      </categories>
      <tags>
        <tag>课程</tag>
        <tag>需求分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于我的Hexo配置记录]]></title>
    <url>%2F2018%2F09%2F13%2F%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84Hexo%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[关于我的 Hexo 配置记录配置背景动画 设置 canvas_nest 无效 如果 next 主题版本在 5.1.1 以上的话，直接在themes/next目录下，将配置文件_config.yml中找到canvas_nest: false，改为canvas_nest: true即可，但是博主配置了无效 - 配置背景图片]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>技术学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 如何从云服务器转到 GitHub Pages+Windows 本地部署]]></title>
    <url>%2F2018%2F09%2F12%2F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[关于 Hexo 如何从云服务器转到 GitHub Pages+Windows 本地部署——by yanc 后来考虑到我的云服务器的优惠就是两年，博主现在大一，等以后大学毕业了阿里云的云服务器也不会再是9.9元/月了，而是一千多大洋，所以到时候买不买还是一个问题，于是在花了很多天捣鼓好了云服务器的配置之后毅然决然的抛弃了他转而用 GitHub Pages 部署我的 Hexo博客，毕竟想一直用下去嘛~ 先总体说一下我的大概的步骤吧 首先当然是搭建好本地环境 完成本地 Hexo 的安装和测试 把云服务器上的关于 Hexo 博客的文件夹整个拷贝到本地并且替代本地的 Hexo 文件夹 部署 Windows 本地的 Hexo 博客到 GitHub 上 这样做下来弄好之后，新的博客一点没变，所有配置依旧玩好无缺，所有博文也是丝毫不差 搭建本地环境1. 摘要，这儿是默认大家都有了 GitHub 账号，要是没有请去注册一个再来 需要安装好 Git Bash 需要安装 Node.js 需要安装 Hexo 2. 安装 Git Bash 去官网下载 Git 客户端：下载地址 安装 Git 客户端：Windows 用户直接 Next 就可以了。Mac 和 Linxu 系统的用户可通过命令方式安装，这里不详细介绍了 3. 安装 Node.js Node.js 官网 4. 创建 GitHub 仓库 登录进入 GitHub 进入创建仓库页面，这个没什么好说的 填写创建仓库信息： 仓库名称必须是：你的用户名.github.io，比如博主 GitHub 的名字为 Missyanc，仓库名称就为：Missyanc.github.io，以后再解释为什么 填写好相关信息，点击 Create repository(创建仓库) 按钮。 5. 配置 SSH 打开 Git Bash 终端 设置 user name 和 email： 12$ git config --global user.name &quot;你的GitHub用户名&quot;$ git config --global user.email &quot;你的GitHub注册邮箱&quot; 一般情况下是不需要密码的，所以，接下来直接回车就好 此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的 ssh 密钥文件 id_rsa 和 id_rsa.pub 注：id_rsa 文件是私钥，要妥善保管，id_rsa.pub 是公钥文件。 添加公钥到 github：点击用户头像，然后点击显示的 Settings(设置) 选项 在用户设置栏，点击 SSH and GPG keys 选项，然后点击 New SSH key(新建 SSH) 按钮 Titel 可以随便取一个，将 id_rsa.pub 中的内容复制到 Key 文本框中，然后点击 Add SSH key(添加 SSH) 按钮 可以测试一下 SSH ： 1$ ssh -T git@github.com 以上搭建本地环境完成 本地 Hexo 的安装和测试1.新建博客文件夹：这里就取名为 blog1mkdir blog 2.安装 Hexo 先进入到 blog 目录 1cd blog 安装 Hexo 1npm install hexo-cli -g 初始话 Hexo 1hexo init 启动测试 Hexo 是否安装初始化成功 12hexo ghexo s 启动之后，打开浏览器，在地址栏输入：http://localhost:4000，你会看到 Hexo 的示例页面 Hexo 把云服务器上的关于 Hexo 博客的文件夹整个拷贝到本地把云服务器上原本的 Hexo 博客文件夹拷贝下来 注：博主用的与云服务器终端连接的工具为 Xshell，传输文件的为 Xftp 找到云服务器的文件夹，然后传输下来，如下图： 等到该文件夹下载完毕把该文件夹下所有的文件拷贝替代原本本地博客 blog 下的所有文件 现在在 Git Bash 上输入： 12# 清除缓存hexo clean 然后再如上启动 Hexo，并且打开浏览器，在地址栏输入：http://localhost:4000看是否为你的云服务器上的 Hexo 12hexo ghexo s 部署 Windows 本地的 Hexo 博客到 GitHub 上 编辑配置文件，关联远程仓库。在编辑器中打开 Hexo 配置文件_config.yml，找到下面内容： 1234# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 添加 github 仓库信息： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:Missyanc/Missyanc.github.io.git #github仓库地址 branch: master # github分支 把其中repo字段的值替换成你的github pages提交代码的 git 地址 别告诉我你不知道你的 github pages 的 git 提交地址。就是你刚刚创建那个github pages仓库的地址 注意：type、repo、branch 的前面有两个空格，后面的: 后面有一个空格 安装 git 插件 1npm install hexo-deployer-git --save 如果没有安装 git 插件，会有错误提示，安装后重新部署就可以了 部署 1hexo d 如果没有意外，部署就成功了，可以打开 https://你的用户名.github.io 查看 ps.&emsp;hexo 命令缩写 hexo g：hexo generate hexo c：hexo clean hexo s：hexo server hexo d：hexo deploy 耶，大功告成！接下来就是搞我的 Hexo 配置啦]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>技术学习</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[标准开头Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[阿里云服务器添加安全组规则]]></title>
    <url>%2F2018%2F09%2F11%2F%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8%E7%BB%84%E8%A7%84%E5%88%99%2F</url>
    <content type="text"><![CDATA[阿里云服务器添加安全组规则——by yanc 先登录你的阿里云并且进入到管理控制台 找到安全组，点击进入，具体操作如下图： 进入安全组之后，点击配置规则，具体操作如下图： 开始配置规则，如下图所示： 点击确定，添加安全组规则完成]]></content>
      <categories>
        <category>云服务器</category>
      </categories>
      <tags>
        <tag>技术学习</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云服务器配置Hexo最详细教程]]></title>
    <url>%2F2018%2F09%2F11%2F%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEHexo%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[记录自己的整个 Hexo 安装——by yanc 写在前面，本人用的是阿里的云服务器与 Hexo 搭建的个人博客，可以与 git 网站关联，代码可以实时上传在 git 上，云服务器是基于 Linux 系统的，如果只是单纯的想部署到云服务器上可以忽略以下的 git 相关部分，以后再试着整个全部部署在 git bash 上 这整个过程我花了好几天摸索搞好，现在写下来记录 做这个博客本人的初衷是记录下和家人与所爱的人发生的事，以及自己学习的历程 一、环境搭建 第一步我们先安装 Node.js ，我是选择的下载压缩包然后解压然后安装 在官网下载压缩包：1wget https://nodejs.org/dist/v8.1.2/node-v8.1.2.tar.gz 解压缩：1tar -zxvf node-v8.1.2.tar.gz 安装 Node.js：1nvm install stable 第二步就是安装 Hexo 1nvm install stable &emsp;&emsp;以上的步骤的目录的可以自选，但是最好在 root 目录下 二、创建我们的完整的博客目录 确保你的 Linux 云服务器上装好了 git，如果没有请装上 git ，git安装及相关操作教程请看廖雪峰的 git 教程 第一步是选择好目录，挑好了你的建博客的地址。我们先要建 git 本地仓库的目录并且初始化 git 本地仓库 1mkdir git_blog 在该目录下初始化 git 本地仓库： 1git init 在这个 git 本地仓库的目录下建好 Hexo 博客目录并且初始化 1mkdir Hexo 1hexo init &emsp;&emsp;此时 root/git_blog 目录的文件目录结构如下： 三、测试我们的 Hexo 看能否正常打开 默认的端口号为4000，所以普通的系统我们只需要输入 http://localhost:4000 就好。 但是我们的是阿里云服务器，部署的是 Linux 系统，所以我们的测试用以下命令测试： 1curl http://localhost:4000 OK，输入上面的命令得到一堆东西，到这你的都应该和我一样没问题，当然目前用的是默认的 Hexo 主题 landscape 于是博主就开心的去了自己的 Windows 系统的 Chrome 浏览器下输入了博主自己的阿里云服务器私有ip + :4000（ip:4000）地址，结果无法访问 于是又开始了辛苦（想哭）的找问题过程 结果就是我解决啦，也明白了ip和端口号的关系！问题在于我的阿里云服务器安全组没有给4000这个端口放心，关于阿里云服务器怎么添加端口安全组请看这：阿里云服务器添加安全组配置 ps.&emsp;博主连接阿里云服务器终端是用的 Xshell 工具]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>技术学习</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我爱的是言草右小姐]]></title>
    <url>%2F2018%2F09%2F11%2F%E6%88%91%E7%88%B1%E7%9A%84%E8%A8%80%E8%8D%89%E5%8F%B3%E5%B0%8F%E5%A7%90%2F</url>
    <content type="text"><![CDATA[我爱的是言草右小姐，Missyanc2018/9/12 言草右小姐送给我一块漂亮的手表，这是别人送我第一块表，言草右小姐说她想用这块手表换取我的时间，让我能和她一直玩。]]></content>
      <categories>
        <category>言小姐</category>
      </categories>
      <tags>
        <tag>yanc</tag>
        <tag>myLove</tag>
      </tags>
  </entry>
</search>
